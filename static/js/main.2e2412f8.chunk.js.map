{"version":3,"sources":["analysis/changes.js","analysis/chains.js","ui/ErrorBox.js","analysis/dependencies.js","analysis/size.js","ui/graph/NodeSize.js","analysis/info.js","ui/graph/NodeName.js","ui/graph/NodeCard.js","ui/graph/EdgeLinkButton.js","ui/graph/ChainItem.js","ui/EmptyBox.js","ui/graph/ChainsList.js","ui/graph/ChainsExplorer.js","ui/WarningBar.js","ui/ErrorBar.js","ui/graph/ChangesView.js","ui/graph/NodeItem.js","ui/tree.js","ui/graph/NodeList.js","ui/graph/GraphExplorer.js","ui/graph/ParentsExplorer.js","ui/graph/ChildrenExplorer.js","AppUI.js","analysis/webpack.js","App.js","registerServiceWorker.js","index.js","history.js","analysis/utils.js","analysis/graph.js"],"names":["MOCKED_EDGE_KIND","addChange","graph","changes","change","newChanges","Object","lodash__WEBPACK_IMPORTED_MODULE_0__","edge","_graph__WEBPACK_IMPORTED_MODULE_1__","from","to","wasOriginallyEnabled","kind","enabled","push","applyChanges","fromNode","nodes","toNode","errors","message","async","findChains","gatherChains","node","toId","path","visited","currentPath","id","paths","children","indexOf","childId","result","analysis_graph","length","idle","ui_ErrorBox","styles","theme","root","background","palette","error","dark","color","contrastText","padding","display","align-items","flex-shrink","icon","margin-right","classes","undefined","String","react","className","index_es","label","walkGraph","options","nodesKey","getDeepNodeChildren","key","cache","then","keys","keepOnlyEntryModules","filter","parents","every","parentId","keepOnlyLeafModules","calculateRetainedTreeSize","rootNode","[object Object]","allChildrenPromise","rootsChildrenPromise","Promise","all","allChildren","rootsChildren","ids","lodash","getRetainedNodes","tree","reduce","sum","size","graph_NodeSize","bigger","red_default","a","A700","smaller","green_default","baseGraph","retainerRootNode","treeSizeCalculator","g","calculateTreeSize","react_promise_es","promise","baseTreeSize","treeSize","title","enterDelay","numeral_default","format","Math","abs","pending","FILENAME_RE","getPackageName","file","found","match","graph_NodeName","maxWidth","flexDirection","whiteSpace","overflow","packageName","textOverflow","flexShrink","minWidth","name","extension","hidePackage","onlyPackage","tooltip","info","pathToPackage","getModuleInfo","replace","text","classnames_default","originalId","placement","disableFocusListener","graph_NodeCard","position","flexGrow","justifyContent","card","marginBottom","edgeButton","left","top","expand","transform","transition","transitions","create","duration","shortest","marginLeft","breakpoints","up","marginRight","expandOpen","args","_temp","super","this","state","expanded","render","_this$props","props","actions","variant","noWrap","disableActionSpacing","onClick","setState","in","gutterBottom","graph_EdgeLinkButton","aria-label","graph_ChainItem","width","link","chain","through","style","checked","dense","ContainerComponent","button","disableGutters","primary","secondary","primaryTypographyProps","ui_EmptyBox","alignItems","textAlign","margin-bottom","graph_ChainsList","list","outline","chains","selectedChain","onChainSelect","usedIds","finalChains","map","dist_es","height","rowCount","rowHeight","rowRenderer","index","_finalChains$index","noRowsRenderer","graph_ChainsExplorer","chainsList","selectedChainScroll","overflowY","listProgress","marginTop","chainsPromiseSelector","lib","p","_waitingForChainsPromise","renderSelectedChain","pinned","onAddChange","onFromNodeSelect","onToNodeSelect","onPinnedToggle","isFirst","isLast","prevNode","renderChains","_this$props2","componentDidMount","componentDidUpdate","prevProps","baseGraphChanged","_this$props3","currentFrom","currentTo","prevFrom","prevTo","fromToIdChanged","chainsPromise","_this$props4","catch","ui_WarningBar","amber_default","ui_ErrorBar","graph_ChangesView","maxHeight","delete","onChangesUpdate","textsToCopy","_window$location","window","location","origin","pathname","hash","currentUrlState","src_history","slice","shareUrl","encodeUrlStateHash","fromName","toName","react_copy_to_clipboard_lib","join","graph_NodeItem","selectFromNode","selectToNode","selectNode","secondaryActions","action","defaultGetChildren","row","defaultGetKey","isTreeExpanded","_options$getKey","getKey","toggleTreeRowState","current","_options$getKey2","tree_objectSpread","e","toggleTreeRow","treeOptions","group","graph_NodeList","search","listContainer","fuseSelector","_","fuse_default","searchSelector","s","fuse","pinnedSelector","groupSelector","sortGroupsBySize","groups","rows","unshift","nodesSelector","flattenTreeToRows","_options$getChildren","getChildren","renderList","renderItem","renderEmpty","divider","loading","type","value","onChange","el","target","endAdornment","placeholder","graph_GraphExplorer","modeMenuItem","modeId","modeMenuAnchor","modeSelector","modes","defaultMode","getNodes","nodesPromiseSelector","resolve","handleModeMenuOpen","event","currentTarget","handleModeMenuClose","selected","onNodeSelect","mode","itemProps","assign","renderModeMenu","_this$state","currentModeId","anchorEl","open","Boolean","onClose","renderTitle","nodesPromise","header","renderInfo","headerMore","graph_ParentsExplorer","allNodesSelector","getAllNodes","entryNodesSelector","getEntryNodes","leafNodesSelector","getLeafNodes","directParentNodesSelector","getDirectParentNodes","parentNodesSelector","getDeepNodeParents","getParentNodes","parentEntryNodesSelector","getParentEntryNodes","directParents","parentEntries","entries","initialModes","initialAll","initialEntries","initialLeafs","graph_ChildrenExplorer","directChildrenNodesSelector","getDirectChildrenNodes","childrenNodesSelector","getChildrenNodes","childLeafNodesSelector","getChildLeafNodes","directChildren","childLeafs","leafs","__webpack_exports__","fontFamily","container","panes","parentsExplorer","pathsExplorer","childrenExplorer","textTransform","borderBottom","dropzone","openButton","openFileMessage","alignSelf","margin","cursor","renderGraph","showChanges","onNodesSelectionReset","onFileDrop","onShowChangesToggle","es","multiple","activeClassName","rejectClassName","accept","onDrop","disableClick","ref","LinearProgress_default","progress","fontSize","href","rel","anchor","readWebpackStats","stats","_graph__WEBPACK_IMPORTED_MODULE_0__","_options$includeAsync","includeAsyncImports","_options$includeChunk","includeChunks","_stats$chunks","chunks","_stats$modules","modules","chunk","reason","names","original","module","isConcat","isNamespace","identifier","chunkId","reasons","moduleId","moduleIdentifier","userRequest","react_hot_loader__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_0__","fromNodeId","toNodeId","handleStorageEvent","newValue","JSON","parse","handleHistoryChange","hashState","_history__WEBPACK_IMPORTED_MODULE_7__","lodash__WEBPACK_IMPORTED_MODULE_2__","pushHistory","encodedState","history","pushState","openFile","json","callback","console","time","_analysis_webpack__WEBPACK_IMPORTED_MODULE_3__","timeEnd","log","warn","handleDrop","rejected","reject","reader","FileReader","onload","onerror","readAsBinaryString","toggleShowChanges","_this$state2","newGraph","_analysis_graph__WEBPACK_IMPORTED_MODULE_4__","_analysis_changes__WEBPACK_IMPORTED_MODULE_5__","updateChanges","localStorage","setItem","stringify","_this$state3","Error","setNodesSelection","resetNodesSelection","_this$state4","_this$state5","togglePinned","wasPinned","pin","initLocalStorage","initHistory","NODE_ENV","PUBLIC_URL","REACT_APP_STATS","fetch","prevState","hasNewBaseGraph","hasNewChanges","getItem","addEventListener","_this$state6","_AppUI__WEBPACK_IMPORTED_MODULE_6__","isLocalhost","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","rootEl","document","getElementById","URL","response","status","headers","get","ready","unregister","reload","react_dom_default","react_default","createElement","App","btoa","decodeUrlStateHash","atob","ABORTED","Symbol","backgroundProcessor","abort","idleReject","fn","setTimeout","err","createGraph","edges","getNodeId","getEdgeId","getNode","resolveNode","resolveEdgeForNodes","bind","values","addNode","_node","addEdge","_edge","toggleEdge","abortGraph","cloneGraph"],"mappings":"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","file":"static/js/main.2e2412f8.chunk.js","sourcesContent":["// @flow\n\nimport type {Graph, NodeID} from './graph'\n\nimport {reject, pick} from 'lodash'\nimport {toggleEdge, addEdge, resolveEdgeForNodes} from './graph'\n\nexport type EdgeChange = {|\n  change: 'edge',\n  from: NodeID,\n  to: NodeID,\n  enabled: boolean,\n|}\n\nexport type Change = EdgeChange\n\nexport const MOCKED_EDGE_KIND = 'mocked'\n\nexport function addChange(graph: Graph, changes: $ReadOnlyArray<Change>, change: Change) {\n  // Remove same changes from queue\n  const newChanges = reject(changes, pick(change, ['change', 'from', 'to']))\n  if (change.change === 'edge') {\n    const edge = resolveEdgeForNodes(graph, change.from, change.to)\n    const wasOriginallyEnabled = edge ? edge.kind !== MOCKED_EDGE_KIND : false\n    // Add to queue only if it's a different state than originally\n    if (change.enabled !== wasOriginallyEnabled) {\n      newChanges.push(change)\n    }\n  }\n  return newChanges\n}\n\nexport function applyChanges(graph: Graph, changes: $ReadOnlyArray<Change>) {\n  for (const change of changes) {\n    if (change.change === 'edge') {\n      const fromNode = graph.nodes[change.from]\n      const toNode = graph.nodes[change.to]\n      if (!fromNode || !toNode) {\n        graph.errors.push({message: `One of the nodes is missing, cannot apply the change`, change})\n        continue\n      }\n\n      let edge = resolveEdgeForNodes(graph, change.from, change.to)\n      if (!edge) {\n        edge = addEdge(graph, {\n          from: change.from,\n          to: change.to,\n          enabled: change.enabled,\n          kind: MOCKED_EDGE_KIND,\n        })\n      }\n      toggleEdge(graph, edge, change.enabled)\n    }\n  }\n}\n","// @flow\n\nimport type {Graph, Node, NodeID} from './graph'\nimport {getNode} from './graph'\n\nexport type EdgeChain = NodeID[]\n\nasync function gatherChains(\n  graph: Graph,\n  node: Node,\n  toId: NodeID,\n  path: NodeID[],\n  visited: {[NodeID]: boolean},\n) {\n  const currentPath = [...path, node.id]\n  if (node.id === toId) return [currentPath]\n\n  visited[node.id] = true\n  const paths = []\n\n  // prefer shortes paths first\n  if (node.children.indexOf(toId) >= 0) {\n    paths.push([...currentPath, toId])\n  }\n\n  for (const childId of node.children) {\n    if (visited[childId]) continue\n    if (childId === toId) continue\n    const result = await gatherChains(graph, getNode(graph, childId), toId, currentPath, visited)\n    if (result.length > 0) {\n      paths.push(...result)\n    }\n    await graph.idle()\n  }\n  return paths\n}\n\nexport async function findChains(graph: Graph, fromNode: Node, toNode: Node): Promise<EdgeChain[]> {\n  return gatherChains(graph, fromNode, toNode.id, [], {})\n}\n","// @flow\n\nimport * as React from 'react'\nimport {withStyles, Icon} from '@material-ui/core'\n\ntype Props = {|\n  error?: any,\n  children?: React.Node,\n  classes: Object,\n|}\n\nconst styles = theme => ({\n  root: {\n    background: theme.palette.error.dark,\n    color: theme.palette.error.contrastText,\n    padding: 16,\n    display: 'flex',\n    'align-items': 'center',\n    'flex-shrink': 0,\n  },\n  icon: {\n    'margin-right': 8,\n  },\n})\n\nconst ErrorBox = ({classes, error, children}: Props) => {\n  if (children === undefined) children = String(error)\n  return (\n    <div className={classes.root}>\n      <Icon className={classes.icon}>error</Icon>\n      <span className={classes.label}>\n        {React.isValidElement(children) ? children : String(children)}\n      </span>\n    </div>\n  )\n}\n\nexport default withStyles(styles)(ErrorBox)\n","// @flow\n\nimport {difference} from 'lodash'\nimport type {Graph, Node, NodeID} from './graph'\nimport {getNode} from './graph'\n\nasync function walkGraph(\n  graph: Graph,\n  node: Node,\n  options: {visited: {[NodeID]: boolean}, nodesKey: string},\n) {\n  options.visited[node.id] = true\n\n  for (const childId of node[options.nodesKey]) {\n    if (options.visited[childId]) continue\n    await walkGraph(graph, getNode(graph, childId), options)\n    await graph.idle()\n  }\n}\n\nexport function getDeepNodeChildren(graph: Graph, node: Node): Promise<$ReadOnlyArray<NodeID>> {\n  const key = `getDeepNodeChildren:${node.id}`\n  if (!graph.cache[key]) {\n    const visited = {}\n    graph.cache[key] = walkGraph(graph, node, {visited, nodesKey: 'children'}).then(() => {\n      // $FlowFixMe\n      delete visited[node.id]\n      return Object.keys(visited)\n    })\n  }\n  return graph.cache[key]\n}\n\nexport function getDeepNodeParents(graph: Graph, node: Node): Promise<$ReadOnlyArray<NodeID>> {\n  const key = `getDeepNodeParents:${node.id}`\n  if (!graph.cache[key]) {\n    const visited = {}\n    graph.cache[key] = walkGraph(graph, node, {visited, nodesKey: 'parents'}).then(() => {\n      // $FlowFixMe\n      delete visited[node.id]\n      return Object.keys(visited)\n    })\n  }\n  return graph.cache[key]\n}\n\n// Returns all nodes introduced to the dependency tree of rootNode by adding the node to it.\n// In another word - how many modules are retained in the dependency tree because of the `node`\n// Does not include the node itself\nexport function getRetainedNodes(\n  graph: Graph,\n  rootNode: Node,\n  node: Node,\n): Promise<$ReadOnlyArray<NodeID>> {\n  const key = `getRetainedNodes:${rootNode.id}:${node.id}`\n  if (!graph.cache[key]) {\n    const visited = {\n      [node.id]: true,\n    }\n    const allChildrenPromise = getDeepNodeChildren(graph, rootNode)\n    const rootsChildrenPromise = walkGraph(graph, rootNode, {visited, nodesKey: 'children'}).then(\n      () => {\n        return Object.keys(visited)\n      },\n    )\n    graph.cache[key] = Promise.all([allChildrenPromise, rootsChildrenPromise]).then(\n      ([allChildren, rootsChildren]) => {\n        // If they're not connected - there's no retention\n        if (allChildren.indexOf(node.id) < 0) {\n          return []\n        }\n        // All children in the tree except the ones connected to the root\n        const ids = difference(allChildren, rootsChildren)\n        ids.push(node.id)\n        return ids\n      },\n    )\n  }\n  return graph.cache[key]\n}\n\nexport function keepOnlyEntryModules(graph: Graph, nodes: $ReadOnlyArray<Node>) {\n  return nodes.filter((node: Node) => {\n    if (node.kind !== 'module') return false\n    return node.parents.every(parentId => getNode(graph, parentId).kind !== 'module')\n  })\n}\n\nexport function keepOnlyLeafModules(graph: Graph, nodes: $ReadOnlyArray<Node>) {\n  return nodes.filter((node: Node) => {\n    if (node.kind !== 'module') return false\n    return node.children.length === 0\n  })\n}\n","// @flow\n\nimport type {Graph, Node, NodeID} from './graph'\nimport {getNode} from './graph'\nimport {getDeepNodeChildren, getRetainedNodes} from './dependencies'\n\nexport type EdgePath = NodeID[]\n\nexport function calculateTreeSize(graph: Graph, node: Node): Promise<number> {\n  const key = `calculateTreeSize:${node.id}`\n\n  if (!graph.cache[key]) {\n    graph.cache[key] = getDeepNodeChildren(graph, node).then(tree =>\n      tree.reduce((sum, id) => sum + getNode(graph, id).size, node.size),\n    )\n  }\n  return graph.cache[key]\n}\n\nexport function calculateRetainedTreeSize(\n  graph: Graph,\n  rootNode: Node,\n  node: Node,\n): Promise<number> {\n  const key = `calculateRetainedTreeSize:${rootNode.id}:${node.id}`\n\n  if (!graph.cache[key]) {\n    graph.cache[key] = getRetainedNodes(graph, rootNode, node).then(tree =>\n      tree.reduce((sum, id) => sum + getNode(graph, id).size, 0),\n    )\n  }\n  return graph.cache[key]\n}\n","// @flow\nimport type {Graph, Node} from '../../analysis/graph'\n\nimport * as React from 'react'\nimport numeral from 'numeral'\nimport Async from 'react-promise'\nimport {withStyles, Tooltip} from '@material-ui/core'\nimport red from '@material-ui/core/colors/red'\nimport green from '@material-ui/core/colors/green'\n\nimport {calculateTreeSize, calculateRetainedTreeSize} from '../../analysis/size'\nimport {getNode} from '../../analysis/graph'\n\ntype Props = {|\n  baseGraph: Graph,\n  graph: Graph,\n  retainerRootNode?: ?Node,\n  node: Node,\n  classes: Object,\n|}\n\nconst styles = theme => ({\n  bigger: {\n    color: red.A700,\n  },\n  smaller: {\n    color: green.A700,\n  },\n})\n\nfunction NodeSize({baseGraph, graph, node, retainerRootNode, classes}: Props) {\n  const treeSizeCalculator = retainerRootNode\n    ? g => calculateRetainedTreeSize(g, retainerRootNode, node)\n    : g => calculateTreeSize(g, node)\n  return (\n    <Async\n      promise={Promise.all([\n        baseGraph ? treeSizeCalculator(baseGraph) : undefined,\n        treeSizeCalculator(graph),\n      ])}\n      then={([baseTreeSize, treeSize]) => (\n        <>\n          {!retainerRootNode || treeSize > 0 ? (\n            <>\n              <Tooltip title=\"Node size\" enterDelay={500}>\n                <span>{numeral(node.size).format('0[.]0b')}</span>\n              </Tooltip>\n              {' + '}\n              <Tooltip\n                title={retainerRootNode ? 'Size of retained dependencies ' : 'Size of dependencies'}\n                enterDelay={500}\n              >\n                <span>{numeral(treeSize - node.size).format('0[.]0b')}</span>\n              </Tooltip>\n            </>\n          ) : (\n            'unrelated'\n          )}\n          {baseTreeSize != null && treeSize !== baseTreeSize ? (\n            <Tooltip title=\"Difference without changes\" enterDelay={500}>\n              <span className={treeSize > baseTreeSize ? classes.bigger : classes.smaller}>\n                {' ('}\n                {treeSize > baseTreeSize ? '+' : '-'}\n                {numeral(Math.abs(treeSize - baseTreeSize)).format('0[.]0b')}\n                {')'}\n              </span>\n            </Tooltip>\n          ) : null}\n        </>\n      )}\n      pending={'...'}\n    />\n  )\n}\nexport default withStyles(styles)(NodeSize)\n","// @flow\n\nimport type {Node, NodeID} from './graph'\n\nexport type EdgePath = NodeID[]\n\n// https://regex101.com/r/yU5wqf/2\n// 1 - path to packages dir (null if no package)\n// 2 - package name (null if no package)\n// 3 - directory in package\n// 4 - filename\n// 5 - extension\nconst FILENAME_RE = /^(?:(.*\\/(?:node_modules|web_modules|packages|~)\\/)((?:@[^/]+?\\/)?[^/]+))?(.*?\\/)?([^/]+)?(\\.[^./]+)?$/\n\ntype ModuleInfo = {|\n  pathToPackage?: string,\n  packageName?: string,\n  path?: string,\n  name?: string,\n  extension?: string,\n|}\n\nexport function getModuleInfo({file, name, id}: Node): ModuleInfo {\n  if (!file) {\n    return {name: name || String(id) || '(unknown)'}\n  }\n  const found = file.match(FILENAME_RE)\n  if (!found) {\n    return {path: file}\n  }\n  return {\n    pathToPackage: found[1],\n    packageName: found[2],\n    path: found[3],\n    name: found[4],\n    extension: found[5],\n  }\n}\n\nexport function getPackageName({file}: Node): string {\n  if (!file) return ''\n  const found = file.match(FILENAME_RE)\n  return found ? found[2] : ''\n}\n\nexport function getPackageRelativeFilePath(node: Node): string {\n  const {file} = node\n  if (!file) return ''\n  const pkg = getPackageName(node)\n  if (!pkg) return ''\n  return file.slice(file.indexOf(pkg) + pkg.length + 1)\n}\n\nexport function isExternal({file}: Node): boolean {\n  if (!file) return false\n  return file.indexOf('/node_modules/') >= 0\n}\n\nexport function getFileExtension({file}: Node): string {\n  if (!file) return ''\n  const dot = file.lastIndexOf('.')\n  if (dot <= 0) return ''\n  return file.slice(dot + 1)\n}\n","// @flow\nimport type {Node} from '../../analysis/graph'\n\nimport * as React from 'react'\nimport classNames from 'classnames'\nimport {withStyles, Tooltip} from '@material-ui/core'\n\nimport {getModuleInfo} from '../../analysis/info'\n\ntype Props = {|\n  node: Node,\n  hidePackage?: boolean,\n  onlyPackage?: boolean,\n  tooltip?: boolean | string,\n  children?: React.Node,\n  classes: Object,\n  className?: string,\n|}\n\nconst styles = theme => ({\n  root: {\n    maxWidth: '100%',\n    display: 'inline-flex',\n    flexDirection: 'row',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n  },\n  packageName: {\n    textOverflow: 'ellipsis',\n    flexShrink: 10,\n    overflow: 'hidden',\n  },\n  path: {\n    textOverflow: 'ellipsis',\n    flexShrink: 1000,\n    overflow: 'hidden',\n    minWidth: 10,\n  },\n  name: {\n    textOverflow: 'ellipsis',\n    flexShrink: 1,\n    overflow: 'hidden',\n  },\n  extension: {\n    flexShrink: 0,\n  },\n})\n\nfunction NodeName({node, hidePackage, onlyPackage, tooltip, children, classes, className}: Props) {\n  // {selectFromNode && <a onClick={() => selectFromNode(node.id)}>From</a>}\n  // {selectToNode && <a onClick={() => selectToNode(node.id)}>To</a>}\n\n  const info = getModuleInfo(node)\n\n  const packageName = hidePackage ? '' : info.packageName\n  const path = onlyPackage ? '' : (info.path || '').replace(/^\\/|\\/$/g, '')\n  const name = onlyPackage ? '' : (info.name || '') + (info.extension || '')\n\n  const text = (\n    <span className={classNames(className, classes.root)}>\n      {packageName && <span className={classes.packageName}>{packageName}</span>}\n      {packageName && path ? '/' : ''}\n      {path && <span className={classes.path}>{path}</span>}\n      {(packageName || path) && name ? '/' : ''}\n      {name && <span className={classes.name}>{name}</span>}\n      {(packageName || name) && children ? <span>,&nbsp;</span> : ''}\n      {children && <span className={classes.children}>{children}</span>}\n    </span>\n  )\n\n  if (tooltip) {\n    return (\n      <Tooltip\n        title={\n          typeof tooltip === 'boolean'\n            ? `${node.kind}: ${node.name || ''} (${String(node.originalId)})`\n            : tooltip\n        }\n        placement=\"top\"\n        enterDelay={100}\n        disableFocusListener\n      >\n        {text}\n      </Tooltip>\n    )\n  }\n\n  return text\n}\nexport default withStyles(styles)(NodeName)\n","// @flow\n\nimport type {Graph, Node, Edge} from '../../analysis/graph'\n\nimport * as React from 'react'\nimport classNames from 'classnames'\nimport {\n  withStyles,\n  Typography,\n  IconButton,\n  Icon,\n  Card,\n  CardContent,\n  Collapse,\n  CardActions,\n} from '@material-ui/core'\n\nimport NodeSize from './NodeSize'\nimport NodeName from './NodeName'\n\ntype Props = {|\n  baseGraph: Graph,\n  graph: Graph,\n  node: Node,\n  retainerRootNode?: ?Node,\n  edge?: ?Edge,\n  actions?: React.Node,\n  classes: Object,\n  className?: string,\n|}\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    position: 'relative',\n    flexDirection: 'column',\n    flexShrink: 0,\n    flexGrow: 0,\n    justifyContent: 'stretch',\n  },\n  card: {\n    marginBottom: 24,\n    position: 'relative',\n  },\n  edgeButton: {\n    position: 'absolute',\n    left: -32,\n    top: 12,\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n    marginLeft: 'auto',\n    [theme.breakpoints.up('sm')]: {\n      marginRight: -8,\n    },\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n})\n\ntype State = {\n  expanded: boolean,\n}\n\nclass NodeCard extends React.PureComponent<Props, State> {\n  state = {\n    expanded: false,\n  }\n  render() {\n    const {classes, className, baseGraph, graph, node, retainerRootNode, edge, actions} = this.props\n    const {expanded} = this.state\n\n    return (\n      <div className={classNames(className, classes.root)}>\n        <Card className={classes.card}>\n          <CardContent>\n            <Typography variant=\"headline\" noWrap>\n              <NodeName node={node} hidePackage tooltip />\n            </Typography>\n            <Typography variant=\"subheading\">\n              <NodeName node={node} onlyPackage />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              <NodeSize\n                baseGraph={baseGraph}\n                graph={graph}\n                node={node}\n                retainerRootNode={retainerRootNode}\n              />\n            </Typography>\n          </CardContent>\n          <CardActions className={classes.actions} disableActionSpacing>\n            {actions}\n            <IconButton\n              className={classNames(classes.expand, expanded && classes.expandOpen)}\n              onClick={() => this.setState({expanded: !expanded})}\n            >\n              <Icon>expand_more</Icon>\n            </IconButton>\n          </CardActions>\n          <Collapse in={expanded}>\n            <CardContent>\n              <Typography variant=\"caption\" color=\"textSecondary\">\n                Name\n              </Typography>\n              <Typography variant=\"body2\" gutterBottom>\n                {node.name}\n              </Typography>\n              <Typography variant=\"caption\" color=\"textSecondary\">\n                Kind\n              </Typography>\n              <Typography variant=\"body2\" gutterBottom>\n                {String(node.kind)}\n              </Typography>\n              <Typography variant=\"caption\" color=\"textSecondary\">\n                ID\n              </Typography>\n              <Typography variant=\"body2\" gutterBottom>\n                {String(node.originalId)}\n              </Typography>\n              {edge && (\n                <>\n                  <Typography variant=\"caption\" color=\"textSecondary\">\n                    Edge type\n                  </Typography>\n                  <Typography variant=\"body2\" gutterBottom>\n                    {edge.kind}\n                  </Typography>\n                  <Typography variant=\"caption\" color=\"textSecondary\">\n                    Edge name\n                  </Typography>\n                  <Typography variant=\"body2\" gutterBottom>\n                    {edge.name || ''}\n                  </Typography>\n                </>\n              )}\n            </CardContent>\n          </Collapse>\n        </Card>\n      </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(NodeCard)\n","// @flow\n\nimport type {Edge} from '../../analysis/graph'\n\nimport * as React from 'react'\nimport classNames from 'classnames'\nimport {withStyles, Icon, IconButton, Tooltip} from '@material-ui/core'\n\ntype Props = {|\n  edge: Edge,\n  onClick: Function,\n  classes: Object,\n  className?: string,\n|}\n\nconst styles = theme => ({\n  root: {},\n})\n\nclass EdgeLinkButton extends React.PureComponent<Props> {\n  render() {\n    const {classes, className, edge, onClick} = this.props\n\n    return (\n      <Tooltip\n        title={`${edge.enabled ? 'Unlink' : 'Link'} this node with above one`}\n        disableFocusListener\n        placement=\"top\"\n        enterDelay={500}\n      >\n        <IconButton\n          className={classNames(className, classes.root)}\n          aria-label=\"Unlink\"\n          color={edge.enabled ? 'secondary' : 'default'}\n          onClick={onClick}\n        >\n          <Icon>{edge.enabled ? 'link_off' : 'link'}</Icon>\n        </IconButton>\n      </Tooltip>\n    )\n  }\n}\n\nexport default withStyles(styles)(EdgeLinkButton)\n","// @flow\n\nimport type {Graph, NodeID} from '../../analysis/graph'\n\nimport * as React from 'react'\nimport {withStyles, ListItem, ListItemText} from '@material-ui/core'\n\nimport {getNode} from '../../analysis/graph'\nimport NodeName from './NodeName'\n\ntype Props = {|\n  graph: Graph,\n  chain: $ReadOnlyArray<NodeID>,\n  through: $ReadOnlyArray<NodeID>,\n  checked?: boolean,\n\n  onClick: Function,\n\n  style: Object,\n  classes: Object,\n|}\n\nconst styles = theme => ({\n  root: {},\n  nodes: {\n    display: 'flex',\n    flexDirection: 'row',\n  },\n  node: {\n    width: 300,\n    marginRight: 24,\n    position: 'relative',\n  },\n  link: {\n    position: 'absolute',\n    left: -24,\n    top: 0,\n  },\n})\n\nfunction ChainItem({graph, chain, through, onClick, style, classes, checked}: Props) {\n  return (\n    <div style={style}>\n      <ListItem dense ContainerComponent=\"div\" button onClick={onClick} disableGutters>\n        <ListItemText\n          primary={through.length ? <NodeName node={getNode(graph, through[0])} /> : 'Direct'}\n          secondary={`${chain.length - 1} nodes deep`}\n          primaryTypographyProps={{noWrap: true, color: checked ? 'secondary' : 'default'}}\n        />\n      </ListItem>\n    </div>\n  )\n}\n\nexport default withStyles(styles)(ChainItem)\n","// @flow\n\nimport * as React from 'react'\nimport {withStyles} from '@material-ui/core'\n\ntype Props = {|\n  children: React.Node,\n  icon: React.Node,\n  classes: Object,\n|}\n\nconst styles = theme => ({\n  root: {\n    color: theme.palette.text.secondary,\n    padding: 24,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexShrink: 0,\n    textAlign: 'center',\n  },\n  icon: {\n    'margin-bottom': 8,\n  },\n})\n\nconst EmptyBox = ({classes, children, icon}: Props) => (\n  <div className={classes.root}>\n    <div className={classes.icon}>{icon}</div>\n    <div>{children}</div>\n  </div>\n)\n\nexport default withStyles(styles)(EmptyBox)\n","// @flow\n\nimport type {Graph, Node, NodeID} from '../../analysis/graph'\n\nimport * as React from 'react'\nimport classNames from 'classnames'\nimport {difference} from 'lodash'\nimport {List, AutoSizer} from 'react-virtualized'\nimport {withStyles, Icon} from '@material-ui/core'\n\nimport ChainItem from './ChainItem'\nimport EmptyBox from '../EmptyBox'\n\ntype Props = {|\n  graph: Graph,\n  fromNode: Node,\n  toNode: Node,\n  chains: $ReadOnlyArray<$ReadOnlyArray<NodeID>>,\n  selectedChain: $ReadOnlyArray<NodeID>,\n  onChainSelect: (nodes: $ReadOnlyArray<NodeID>) => void,\n  classes: Object,\n  className?: string,\n|}\n\nconst styles = theme => ({\n  root: {\n    position: 'relative',\n  },\n  list: {\n    outline: 0,\n  },\n})\n\nfunction ChainsList(props: Props) {\n  const {classes, className, graph, chains, fromNode, toNode, selectedChain, onChainSelect} = props\n  const usedIds = [fromNode.id, toNode.id]\n  const finalChains = chains.map(chain => {\n    const through = difference(chain, usedIds)\n    usedIds.push(...through)\n    return {through, chain}\n  })\n\n  return (\n    <div className={classNames(className, classes.root)}>\n      <AutoSizer>\n        {({width, height}) => (\n          <List\n            className={classes.list}\n            width={width}\n            height={height}\n            rowCount={finalChains.length}\n            rowHeight={54}\n            rowRenderer={({index, style}) => {\n              const {chain, through} = finalChains[index]\n              return (\n                <ChainItem\n                  key={index}\n                  graph={graph}\n                  chain={chain}\n                  through={through}\n                  onClick={() => onChainSelect(chain)}\n                  style={style}\n                  checked={selectedChain.every((id, index) => chain[index] === id)}\n                />\n              )\n            }}\n            noRowsRenderer={() => (\n              <EmptyBox icon={<Icon>link_off</Icon>}>\n                There is no connection between these nodes\n              </EmptyBox>\n            )}\n          />\n        )}\n      </AutoSizer>\n    </div>\n  )\n}\n\nexport default withStyles(styles)(ChainsList)\n","// @flow\n\nimport type {Graph, Node, NodeID} from '../../analysis/graph'\nimport type {Change} from '../../analysis/changes'\nimport classNames from 'classnames'\n\nimport * as React from 'react'\nimport {createSelector} from 'reselect'\nimport Async from 'react-promise'\nimport {withStyles, Typography, LinearProgress, IconButton, Icon, Tooltip} from '@material-ui/core'\n\nimport {findChains} from '../../analysis/chains'\nimport ErrorBox from '../ErrorBox'\nimport NodeCard from './NodeCard'\nimport {getNodes, resolveEdgeForNodes} from '../../analysis/graph'\nimport EdgeLinkButton from './EdgeLinkButton'\nimport ChainsList from './ChainsList'\n\ntype Props = {|\n  baseGraph: Graph,\n  graph: Graph,\n  fromNode: ?Node,\n  toNode: ?Node,\n  pinned: $ReadOnlyArray<NodeID>,\n  onPinnedToggle: NodeID => any,\n  onAddChange: Change => any,\n  onFromNodeSelect: NodeID => any,\n  onToNodeSelect: NodeID => any,\n  classes: Object,\n  className?: string,\n|}\n\ntype State = {\n  selectedChain: ?$ReadOnlyArray<NodeID>,\n}\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    position: 'relative',\n    flexDirection: 'row',\n    justifyContent: 'stretch',\n  },\n\n  chains: {\n    width: 300,\n    flexGrow: 0.2,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'stretch',\n    marginRight: 24,\n  },\n  chainsList: {\n    flexGrow: 1,\n  },\n  selectedChain: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n    position: 'relative',\n    width: 300,\n  },\n  selectedChainScroll: {\n    overflowY: 'auto',\n    padding: '0 8px 0 8px',\n  },\n  listProgress: {\n    marginTop: 16,\n  },\n})\n\nclass ChainsExplorer extends React.PureComponent<Props, State> {\n  state = {\n    selectedChain: null,\n  }\n\n  chainsPromiseSelector = createSelector(\n    p => p.graph,\n    p => p.fromNode,\n    p => p.toNode,\n    (graph, fromNode, toNode) => {\n      if (!fromNode || !toNode) return null\n      return findChains(graph, fromNode, toNode)\n    },\n  )\n\n  componentDidMount() {\n    this.componentDidUpdate({})\n  }\n\n  _waitingForChainsPromise: any\n  componentDidUpdate(prevProps) {\n    const baseGraphChanged = this.props.baseGraph !== prevProps.baseGraph\n    const {fromNode: currentFrom, toNode: currentTo} = this.props\n    const {fromNode: prevFrom, toNode: prevTo} = prevProps\n    const fromToIdChanged =\n      (currentFrom && currentFrom.id) !== (prevFrom && prevFrom.id) ||\n      (currentTo && currentTo.id) !== (prevTo && prevTo.id)\n    if (baseGraphChanged || fromToIdChanged) {\n      // Select the first chain whenever nodes or base graph changes,\n      // but keep it if user edits the graph\n      const chainsPromise = this.chainsPromiseSelector(this.props)\n      this.setState({\n        selectedChain: null,\n      })\n      this._waitingForChainsPromise = chainsPromise\n      if (currentFrom && currentTo && chainsPromise) {\n        chainsPromise.then(chains => {\n          if (this._waitingForChainsPromise !== chainsPromise) return\n          this.setState({selectedChain: chains[0] || [currentFrom.id, currentTo.id]})\n        })\n      }\n    }\n  }\n\n  renderSelectedChain = () => {\n    const {\n      baseGraph,\n      graph,\n      pinned,\n      fromNode,\n      onAddChange,\n      onFromNodeSelect,\n      onToNodeSelect,\n      onPinnedToggle,\n    } = this.props\n    const {selectedChain} = this.state\n    if (!selectedChain) return null\n    const nodes = getNodes(graph, selectedChain)\n\n    return nodes.map((node: Node, index) => {\n      const isFirst = index === 0\n      const isLast = index === nodes.length - 1\n      if (isFirst) return null\n      const prevNode = nodes[index - 1]\n      const edge = resolveEdgeForNodes(graph, prevNode.id, node.id) || {\n        from: prevNode.id,\n        to: node.id,\n        kind: '',\n        enabled: false,\n      }\n\n      return (\n        <>\n          <NodeCard\n            baseGraph={baseGraph}\n            graph={graph}\n            node={node}\n            retainerRootNode={fromNode}\n            edge={edge}\n            actions={\n              <>\n                <EdgeLinkButton\n                  edge={edge}\n                  onClick={() =>\n                    onAddChange({\n                      change: 'edge',\n                      from: edge.from,\n                      to: edge.to,\n                      enabled: !edge.enabled,\n                    })\n                  }\n                />\n                <Tooltip\n                  title=\"Set as the first node\"\n                  disableFocusListener\n                  enterDelay={500}\n                  placement=\"top\"\n                >\n                  <IconButton onClick={() => onFromNodeSelect(node.id)}>\n                    <Icon>vertical_align_top</Icon>\n                  </IconButton>\n                </Tooltip>\n                {!isLast && (\n                  <Tooltip\n                    title=\"Set as the last node\"\n                    disableFocusListener\n                    enterDelay={500}\n                    placement=\"top\"\n                  >\n                    <IconButton onClick={() => onToNodeSelect(node.id)}>\n                      <Icon>vertical_align_bottom</Icon>\n                    </IconButton>\n                  </Tooltip>\n                )}\n                <IconButton onClick={() => onPinnedToggle(node.id)}>\n                  <Icon>{pinned.indexOf(node.id) >= 0 ? 'star' : 'star_border'}</Icon>\n                </IconButton>\n              </>\n            }\n          />\n        </>\n      )\n    })\n  }\n\n  renderChains = chains => {\n    const {graph, fromNode, toNode, classes} = this.props\n    const {selectedChain} = this.state\n    if (!selectedChain || !fromNode || !toNode) return null\n    return (\n      <ChainsList\n        className={classes.chainsList}\n        graph={graph}\n        fromNode={fromNode}\n        toNode={toNode}\n        chains={chains}\n        selectedChain={selectedChain}\n        onChainSelect={chain => this.setState({selectedChain: chain})}\n      />\n    )\n  }\n\n  render() {\n    const {\n      className,\n      classes,\n      baseGraph,\n      graph,\n      fromNode,\n      toNode,\n      pinned,\n      onPinnedToggle,\n      onToNodeSelect,\n    } = this.props\n    const chainsPromise = this.chainsPromiseSelector(this.props)\n\n    return (\n      <div className={classNames(className, classes.root)}>\n        <div className={classes.chains}>\n          <Typography variant=\"headline\">Dependency chains</Typography>\n          <Typography variant=\"subheading\" gutterBottom>\n            Select one of the dependency chains between these two nodes. Try breaking the links\n            between them to see the impact of your changes.\n          </Typography>\n          <Async\n            promise={chainsPromise}\n            then={chains => this.renderChains(chains)}\n            catch={error => <ErrorBox>{error}</ErrorBox>}\n            pending={<LinearProgress className={classes.listProgress} />}\n          />\n        </div>\n        <div className={classes.selectedChain}>\n          {fromNode && (\n            <NodeCard\n              baseGraph={baseGraph}\n              graph={graph}\n              node={fromNode}\n              actions={\n                <>\n                  {fromNode !== toNode && (\n                    <Tooltip\n                      title=\"Set as the last node\"\n                      disableFocusListener\n                      enterDelay={500}\n                      placement=\"top\"\n                    >\n                      <IconButton onClick={() => onToNodeSelect(fromNode.id)}>\n                        <Icon>vertical_align_bottom</Icon>\n                      </IconButton>\n                    </Tooltip>\n                  )}\n                  <IconButton onClick={() => onPinnedToggle(fromNode.id)}>\n                    <Icon>{pinned.indexOf(fromNode.id) >= 0 ? 'star' : 'star_border'}</Icon>\n                  </IconButton>\n                </>\n              }\n            />\n          )}\n          <div className={classes.selectedChainScroll}>{this.renderSelectedChain()}</div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(ChainsExplorer)\n","// @flow\n\nimport * as React from 'react'\nimport {withStyles, Icon} from '@material-ui/core'\nimport orange from '@material-ui/core/colors/amber'\n\ntype Props = {|\n  children: React.Node,\n  classes: Object,\n|}\n\nconst styles = theme => ({\n  root: {\n    background: orange.A700,\n    padding: '8px 24px 8px 24px',\n    display: 'flex',\n    alignItems: 'center',\n    flexShrink: 0,\n    justifyContent: 'center',\n  },\n  icon: {\n    'margin-right': 8,\n  },\n})\n\nconst WarningBar = ({classes, children}: Props) => (\n  <div className={classes.root}>\n    <Icon className={classes.icon}>warning</Icon>\n    <span className={classes.label}>{children}</span>\n  </div>\n)\n\nexport default withStyles(styles)(WarningBar)\n","// @flow\n\nimport * as React from 'react'\nimport {withStyles, Icon} from '@material-ui/core'\n\ntype Props = {|\n  children: React.Node,\n  classes: Object,\n|}\n\nconst styles = theme => ({\n  root: {\n    background: theme.palette.error.dark,\n    color: theme.palette.error.contrastText,\n    padding: '8px 24px 8px 24px',\n    display: 'flex',\n    alignItems: 'center',\n    flexShrink: 0,\n    justifyContent: 'center',\n  },\n  icon: {\n    'margin-right': 8,\n  },\n})\n\nconst ErrorBar = ({classes, children}: Props) => (\n  <div className={classes.root}>\n    <Icon className={classes.icon}>error</Icon>\n    <span className={classes.label}>{children}</span>\n  </div>\n)\n\nexport default withStyles(styles)(ErrorBar)\n","// @flow\n\nimport type {Graph, NodeID} from '../../analysis/graph'\nimport type {Change} from '../../analysis/changes'\n\nimport * as React from 'react'\nimport {without} from 'lodash'\nimport {CopyToClipboard} from 'react-copy-to-clipboard'\nimport {\n  withStyles,\n  IconButton,\n  Icon,\n  List,\n  Toolbar,\n  Button,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n} from '@material-ui/core'\nimport {resolveEdgeForNodes, getNode} from '../../analysis/graph'\nimport EmptyBox from '../EmptyBox'\nimport {encodeUrlStateHash, decodeUrlStateHash} from '../../history'\n\ntype Props = {|\n  graph: Graph,\n  changes: $ReadOnlyArray<Change>,\n  pinned: $ReadOnlyArray<NodeID>,\n  onChangesUpdate: ($ReadOnlyArray<Change>) => void,\n  classes: Object,\n|}\n\nconst styles = theme => ({\n  root: {},\n  list: {\n    maxHeight: '70vh',\n    overflowY: 'auto',\n  },\n  delete: {},\n})\n\nclass ChangesView extends React.PureComponent<Props> {\n  render() {\n    const {classes, graph, changes, pinned, onChangesUpdate} = this.props\n    const textsToCopy = []\n    // Generate new url with pins and most current changes\n    const {origin, pathname, hash} = window.location\n    const currentUrlState = decodeUrlStateHash(hash.slice(1))\n    const shareUrl = `${origin}${pathname}#${encodeUrlStateHash({\n      ...currentUrlState,\n      changes,\n      pinned,\n    })}`\n    textsToCopy.push(shareUrl)\n    return (\n      <div>\n        <List className={classes.list}>\n          {changes.map((change, index) => {\n            const edge = resolveEdgeForNodes(graph, change.from, change.to)\n            if (!edge) return null\n            const fromNode = getNode(graph, edge.from)\n            const toNode = getNode(graph, edge.to)\n            const fromName = fromNode.file || fromNode.name || fromNode.id\n            const toName = edge.name || toNode.name || toNode.id\n            textsToCopy.push(\n              edge.enabled\n                ? `Add \"${toName}\" to \"${fromName}\"`\n                : `Remove \"${toName}\" from \"${fromName}\"`,\n            )\n            return (\n              <ListItem key={index} graph={graph} change={change}>\n                <IconButton\n                  aria-label=\"Delete\"\n                  className={classes.delete}\n                  onClick={() => onChangesUpdate(without(changes, change))}\n                >\n                  <Icon>delete</Icon>\n                </IconButton>\n                <ListItemText\n                  primary={\n                    edge.enabled ? (\n                      <>\n                        Add \"<b>{toName}</b>\" to \"<b>{fromName}</b>\"\n                      </>\n                    ) : (\n                      <>\n                        Remove \"<b>{toName}</b>\" from \"<b>{fromName}</b>\"\n                      </>\n                    )\n                  }\n                />\n                <ListItemSecondaryAction />\n              </ListItem>\n            )\n          })}\n          {changes.length === 0 && (\n            <EmptyBox icon={<Icon>block</Icon>}>\n              No changes applied. Try breaking links between dependencies\n            </EmptyBox>\n          )}\n        </List>\n        <Toolbar>\n          <Button onClick={() => onChangesUpdate([])}>Reset changes</Button>\n          {textsToCopy.length > 0 ? (\n            <CopyToClipboard text={textsToCopy.join('\\n\\n')}>\n              <Button>Copy changes to clipboard</Button>\n            </CopyToClipboard>\n          ) : null}\n          <CopyToClipboard text={shareUrl}>\n            <Button>Copy URL to clipboard</Button>\n          </CopyToClipboard>\n        </Toolbar>\n      </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(ChangesView)\n","// @flow\nimport type {Graph, Node, NodeID} from '../../analysis/graph'\n\nimport * as React from 'react'\nimport classNames from 'classnames'\nimport {withStyles, ListItem, ListItemText, ListItemSecondaryAction} from '@material-ui/core'\nimport NodeSize from './NodeSize'\nimport NodeName from './NodeName'\n\ntype Props = {|\n  baseGraph: Graph,\n  graph: Graph,\n  checked?: boolean,\n  node: Node,\n  retainerRootNode?: ?Node,\n  secondaryActions?: React.Node[],\n  selectFromNode?: (node: NodeID) => void,\n  selectToNode?: (node: NodeID) => void,\n  onClick?: () => void,\n  style?: Object,\n  classes: Object,\n  className?: string,\n|}\n\nconst styles = theme => ({\n  root: {\n    // paddingLeft: 16,\n  },\n})\n\nfunction NodeItem({\n  baseGraph,\n  graph,\n  checked,\n  onClick,\n  node,\n  retainerRootNode,\n  selectFromNode,\n  selectToNode,\n  selectNode,\n  style,\n  children,\n  classes,\n  className,\n  secondaryActions = [],\n}: Props) {\n  // {selectFromNode && <a onClick={() => selectFromNode(node.id)}>From</a>}\n  // {selectToNode && <a onClick={() => selectToNode(node.id)}>To</a>}\n\n  return (\n    <div style={style}>\n      <ListItem\n        dense\n        disableGutters\n        ContainerComponent=\"div\"\n        button={!!onClick}\n        onClick={onClick}\n        className={classNames(className, classes.root)}\n      >\n        <ListItemText\n          primary={<NodeName node={node} hidePackage tooltip />}\n          primaryTypographyProps={{noWrap: true, color: checked ? 'secondary' : 'default'}}\n          secondary={\n            <NodeSize\n              baseGraph={baseGraph}\n              graph={graph}\n              node={node}\n              retainerRootNode={retainerRootNode}\n            />\n          }\n        />\n        {secondaryActions.map((action, index) => (\n          <ListItemSecondaryAction key={index}>{action}</ListItemSecondaryAction>\n        ))}\n      </ListItem>\n    </div>\n  )\n}\nexport default withStyles(styles)(NodeItem)\n","// @flow\n\ntype TreeState = {\n  expanded: $ReadOnlyArray<any>,\n}\n\ntype TreeOptions = {\n  getChildren?: any => $ReadOnlyArray<any>,\n  getKey?: any => any,\n}\n\nconst defaultGetChildren = row => row.children\nconst defaultGetKey = row => row\n\nexport function isTreeExpanded(state: TreeState, row: any, options?: TreeOptions = {}): boolean {\n  const {getKey = defaultGetKey} = options\n  return state.expanded.indexOf(getKey(row)) >= 0\n}\n\n// Flattens a tree of items into a flat set of rows, which can be then used in any list rendering lib\nexport function flattenTreeToRows(\n  tree: any,\n  state: TreeState,\n  options?: TreeOptions = {},\n): $ReadOnlyArray<any> {\n  const result = []\n  const {getChildren = defaultGetChildren} = options\n  for (const row of tree) {\n    result.push(row)\n    if (isTreeExpanded(state, row, options)) {\n      const children = getChildren(row)\n      result.push(...flattenTreeToRows(children, state, options))\n    }\n  }\n  return result\n}\n\nexport function toggleTreeRow(\n  state: TreeState,\n  row: any,\n  options?: TreeOptions = {},\n  expand?: boolean,\n): TreeState {\n  const current = isTreeExpanded(state, row, options)\n  if (expand == null) {\n    expand = !current\n  }\n  if (expand === current) return state\n  const {getKey = defaultGetKey} = options\n  const key = getKey(row)\n  if (expand) {\n    return {...state, expanded: [...state.expanded, key]}\n  } else {\n    return {...state, expanded: state.expanded.filter(e => e !== key)}\n  }\n}\n\nexport const toggleTreeRowState = (row: any, options?: TreeOptions = {}) => (state: TreeState) =>\n  toggleTreeRow(state, row, options)\n","// @flow\n\nimport numeral from 'numeral'\n\nimport * as React from 'react'\nimport Fuse from 'fuse.js'\nimport {groupBy, map, sortBy, sumBy} from 'lodash'\n\nimport {List, AutoSizer} from 'react-virtualized'\nimport {\n  withStyles,\n  Input,\n  InputAdornment,\n  IconButton,\n  Icon,\n  ListItem,\n  ListItemText,\n  LinearProgress,\n} from '@material-ui/core'\nimport classNames from 'classnames'\nimport {createSelector} from 'reselect'\n\nimport type {Node, Graph, NodeID} from '../../analysis/graph'\nimport {flattenTreeToRows, toggleTreeRowState, isTreeExpanded} from '../tree'\nimport {getPackageName} from '../../analysis/info'\n\ntype Props = {|\n  baseGraph: Graph,\n  graph: Graph,\n  nodes: $ReadOnlyArray<Node>,\n  renderItem: any => React.Node,\n  renderEmpty: any => React.Node,\n  search?: string,\n  selected?: ?Node,\n  pinned: $ReadOnlyArray<NodeID>,\n  sortGroupsBySize?: boolean,\n  loading?: boolean,\n  classes: Object,\n  className?: string,\n|}\n\ntype State = {\n  search: string,\n  expanded: $ReadOnlyArray<any>,\n}\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'stretch',\n  },\n  search: {},\n  listContainer: {\n    flexGrow: 1,\n    position: 'relative',\n  },\n  list: {\n    outline: 0,\n  },\n})\n\nconst treeOptions = {getKey: group => group.name}\n\nclass NodeList extends React.PureComponent<Props, State> {\n  state = {\n    search: '',\n    expanded: [],\n  }\n  fuseSelector = createSelector(\n    (_, p) => p.nodes,\n    nodes => {\n      return new Fuse(nodes, {\n        keys: ['name', 'id', 'kind'],\n      })\n    },\n  )\n  searchSelector = createSelector(\n    this.fuseSelector,\n    s => s.search,\n    (fuse, search) => {\n      return search ? fuse.search(search) : fuse.list\n    },\n  )\n  pinnedSelector = createSelector(\n    this.searchSelector,\n    (_, p) => p.pinned,\n    (nodes, pinned) => {\n      return nodes.filter(node => pinned.indexOf(node.id) >= 0)\n    },\n  )\n  groupSelector = createSelector(\n    this.searchSelector,\n    this.pinnedSelector,\n    (_, p) => p.sortGroupsBySize,\n    (nodes, pinned, sortGroupsBySize) => {\n      const groups = groupBy(nodes, node => {\n        if (node.kind === 'module') {\n          return getPackageName(node) || '(root modules)'\n        }\n        return `(${node.kind}s)`\n      })\n      const rows = sortBy(\n        map(groups, (children, name) => ({\n          name,\n          children: sortBy(children, 'file'),\n          size: sumBy(children, 'size'),\n          group: true,\n        })),\n        sortGroupsBySize ? group => -group.size : 'name',\n      )\n      rows.unshift(...pinned)\n      return rows\n    },\n  )\n  nodesSelector = createSelector(\n    this.groupSelector,\n    s => s.expanded,\n    (tree, expanded) => {\n      return flattenTreeToRows(tree, {expanded}, treeOptions)\n    },\n  )\n\n  renderList() {\n    const {classes, baseGraph, graph, renderItem, renderEmpty} = this.props\n    const nodes = this.nodesSelector(this.state, this.props)\n\n    return (\n      <div className={classes.listContainer}>\n        <AutoSizer>\n          {({width, height}) => (\n            <List\n              className={classes.list}\n              width={width}\n              height={height}\n              rowCount={nodes.length}\n              rowHeight={54}\n              rowRenderer={({index, style}) => {\n                const node = nodes[index]\n                if (node.group) {\n                  return (\n                    <ListItem\n                      dense\n                      ContainerComponent=\"div\"\n                      button\n                      onClick={() => this.setState(toggleTreeRowState(node, treeOptions))}\n                      disableGutters\n                      style={style}\n                      key={index}\n                      divider\n                    >\n                      <ListItemText\n                        primary={node.name}\n                        secondary={`${numeral(node.size).format('0.0b')} in ${\n                          node.children.length\n                        }`}\n                      />\n                      <Icon>\n                        {isTreeExpanded(this.state, node, treeOptions)\n                          ? 'expand_less'\n                          : 'expand_more'}\n                      </Icon>\n                    </ListItem>\n                  )\n                }\n                return renderItem({node, key: node.id, baseGraph, graph, style})\n              }}\n              noRowsRenderer={renderEmpty}\n            />\n          )}\n        </AutoSizer>\n      </div>\n    )\n  }\n\n  render() {\n    const {classes, className, loading} = this.props\n    const {search} = this.state\n    return (\n      <div className={classNames(className, classes.root)}>\n        <Input\n          className={classes.search}\n          id=\"adornment-password\"\n          type=\"text\"\n          value={search}\n          onChange={el => this.setState({search: el.target.value})}\n          endAdornment={\n            search && (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  color=\"inherit\"\n                  aria-label=\"Clear search\"\n                  onClick={() => this.setState({search: ''})}\n                >\n                  <Icon color=\"inherit\">clear</Icon>\n                </IconButton>\n              </InputAdornment>\n            )\n          }\n          placeholder=\"Search\"\n        />\n        {loading ? <LinearProgress className={classes.listProgress} /> : this.renderList()}\n      </div>\n    )\n  }\n}\n//scrollToIndex={scrollToIndex >= 0 ? scrollToIndex : null}\nexport default withStyles(styles)(NodeList)\n","// @flow\n\nimport type {Graph, Node, NodeID} from '../../analysis/graph'\n\nimport * as React from 'react'\nimport classNames from 'classnames'\nimport {map} from 'lodash'\nimport {createSelector} from 'reselect'\nimport Async from 'react-promise'\nimport {\n  withStyles,\n  Icon,\n  Typography,\n  Menu,\n  MenuItem,\n  ListItem,\n  ListItemText,\n} from '@material-ui/core'\n\nimport EmptyBox from '../EmptyBox'\nimport NodeItem from './NodeItem'\nimport NodeList from './NodeList'\n\ntype Mode = {\n  getNodes: () => $ReadOnlyArray<Node> | Promise<$ReadOnlyArray<Node>>,\n  renderTitle: () => React.Node,\n  renderInfo: () => React.Node,\n  renderEmpty: () => string,\n}\n\nexport type Props = {|\n  baseGraph: Graph,\n  graph: Graph,\n  pinned: $ReadOnlyArray<NodeID>,\n  selected: ?Node,\n  retainerRootNode?: ?Node,\n  modes: {\n    [string]: Mode,\n  },\n  defaultMode: string,\n  onNodeSelect: NodeID => void,\n  classes: Object,\n  className?: string,\n|}\n\ntype State = {|\n  modeId: ?string,\n  modeMenuAnchor: any,\n|}\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    position: 'relative',\n    flexDirection: 'column',\n    justifyContent: 'stretch',\n  },\n  list: {\n    flexGrow: 1,\n  },\n  listProgress: {\n    marginTop: 16,\n  },\n  modeMenuItem: {\n    width: 300,\n  },\n})\n\nclass GraphExplorer extends React.Component<Props, State> {\n  state = {modeId: null, modeMenuAnchor: null}\n\n  modeSelector = (s, p) => p.modes[s.modeId || ''] || p.modes[p.defaultMode]\n  nodesSelector = (s, p) => this.modeSelector(s, p).getNodes()\n\n  nodesPromiseSelector = createSelector(\n    this.nodesSelector,\n    // Needed so we don't recreate the promise on every render\n    nodes => Promise.resolve(nodes),\n  )\n\n  static getDerivedStateFromProps({modes = {}}, state = {}) {\n    if (!modes[state.modeId]) {\n      // If selected mode is not available anymore, switch to default\n      return {modeId: null}\n    }\n    return null\n  }\n\n  handleModeMenuOpen = event => {\n    this.setState({modeMenuAnchor: event.currentTarget})\n  }\n  handleModeMenuClose = () => {\n    this.setState({modeMenuAnchor: null})\n  }\n\n  renderList(nodes) {\n    const {classes, baseGraph, graph, retainerRootNode, selected, pinned, onNodeSelect} = this.props\n    const mode = this.modeSelector(this.state, this.props)\n\n    return (\n      <NodeList\n        className={classes.list}\n        nodes={nodes || []}\n        loading={nodes == null}\n        baseGraph={baseGraph}\n        graph={graph}\n        pinned={pinned}\n        selected={selected}\n        sortGroupsBySize\n        renderItem={itemProps => (\n          <NodeItem\n            {...itemProps}\n            retainerRootNode={retainerRootNode}\n            onClick={() => onNodeSelect(itemProps.node.id)}\n            checked={selected ? selected.id === itemProps.node.id : false}\n          />\n        )}\n        renderEmpty={() => <EmptyBox icon={<Icon>block</Icon>}>{mode.renderEmpty()}</EmptyBox>}\n      />\n    )\n  }\n\n  renderModeMenu() {\n    const {classes, modes, defaultMode} = this.props\n    const {modeMenuAnchor, modeId} = this.state\n    const currentModeId = modeId || defaultMode\n    return (\n      <Menu\n        id=\"lock-menu\"\n        anchorEl={modeMenuAnchor}\n        open={Boolean(modeMenuAnchor)}\n        onClose={this.handleModeMenuClose}\n      >\n        {map(modes, (mode: Mode, id) => (\n          <MenuItem\n            className={classes.modeMenuItem}\n            key={id}\n            selected={id === currentModeId}\n            onClick={() => this.setState({modeId: id, modeMenuAnchor: null})}\n          >\n            {mode.renderTitle()}\n          </MenuItem>\n        ))}\n      </Menu>\n    )\n  }\n\n  render() {\n    const {className, classes} = this.props\n\n    const mode = this.modeSelector(this.state, this.props)\n    const nodesPromise = this.nodesPromiseSelector(this.state, this.props)\n\n    return (\n      <div className={classNames(className, classes.root)}>\n        <ListItem\n          button\n          disableGutters\n          className={classes.header}\n          onClick={this.handleModeMenuOpen}\n        >\n          <ListItemText>\n            <Typography variant=\"headline\">{mode.renderTitle()}</Typography>\n            <Typography variant=\"subheading\" gutterBottom>\n              {mode.renderInfo()}\n            </Typography>\n          </ListItemText>\n          <Icon color=\"action\" className={classes.headerMore}>\n            more_vert\n          </Icon>\n        </ListItem>\n        {this.renderModeMenu()}\n        <Async\n          promise={nodesPromise}\n          then={nodes => this.renderList(nodes)}\n          pending={() => this.renderList(null)}\n        />\n      </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(GraphExplorer)\n","// @flow\n\nimport type {Node, NodeID, Graph} from '../../analysis/graph'\n\nimport * as React from 'react'\nimport classNames from 'classnames'\nimport {createSelector} from 'reselect'\nimport {withStyles} from '@material-ui/core'\n\nimport {getNodes, getAllNodes} from '../../analysis/graph'\nimport GraphExplorer from './GraphExplorer'\nimport NodeName from './NodeName'\nimport {\n  getDeepNodeParents,\n  keepOnlyEntryModules,\n  keepOnlyLeafModules,\n} from '../../analysis/dependencies'\n\ntype Props = {|\n  baseGraph: Graph,\n  graph: Graph,\n  fromNode: ?Node,\n  pinned: $ReadOnlyArray<NodeID>,\n  toNode: ?Node,\n  onNodeSelect: NodeID => void,\n\n  className?: string,\n  classes: Object,\n|}\n\nconst styles = {\n  root: {},\n}\n\nclass ParentsExplorer extends React.PureComponent<Props> {\n  allNodesSelector = createSelector((_, p) => p.graph, graph => getAllNodes(graph))\n  getAllNodes = () => this.allNodesSelector(this.state, this.props)\n\n  entryNodesSelector = createSelector(\n    (_, p) => p.graph,\n    graph => keepOnlyEntryModules(graph, getAllNodes(graph)),\n  )\n  getEntryNodes = () => this.entryNodesSelector(this.state, this.props)\n\n  leafNodesSelector = createSelector(\n    (_, p) => p.graph,\n    graph => keepOnlyLeafModules(graph, getAllNodes(graph)),\n  )\n  getLeafNodes = () => this.leafNodesSelector(this.state, this.props)\n\n  directParentNodesSelector = createSelector(\n    (_, p) => p.graph,\n    (_, p) => p.fromNode,\n    (graph, fromNode) => {\n      if (!fromNode) return []\n      return getNodes(graph, fromNode.parents)\n    },\n  )\n  getDirectParentNodes = () => this.directParentNodesSelector(this.state, this.props)\n\n  parentNodesSelector = createSelector(\n    (_, p) => p.graph,\n    (_, p) => p.toNode,\n    (graph, toNode) => {\n      if (!toNode) return []\n      return getDeepNodeParents(graph, toNode).then(ids => getNodes(graph, ids))\n    },\n  )\n  getParentNodes = () => this.parentNodesSelector(this.state, this.props)\n\n  parentEntryNodesSelector = createSelector(\n    (_, p) => p.graph,\n    this.parentNodesSelector,\n    async (graph, nodes) => {\n      return keepOnlyEntryModules(graph, await nodes)\n    },\n  )\n  getParentEntryNodes = () => this.parentEntryNodesSelector(this.state, this.props)\n\n  modes = {\n    all: {\n      getNodes: this.getAllNodes,\n      renderTitle: () => 'All Nodes',\n      renderInfo: () => 'Select node to start from',\n      renderEmpty: () => 'Nothing found',\n    },\n    directParents: {\n      getNodes: this.getDirectParentNodes,\n      renderTitle: () => 'Direct Parents',\n      renderInfo: () => {\n        const {fromNode} = this.props\n        if (!fromNode) return null\n        return (\n          <>\n            Move up to direct parents of <NodeName node={fromNode} />\n          </>\n        )\n      },\n      renderEmpty: () => 'No parents found',\n    },\n    parents: {\n      getNodes: this.getParentNodes,\n      renderTitle: () => 'All Parents',\n      renderInfo: () => {\n        const {toNode} = this.props\n        if (!toNode) return null\n        return (\n          <>\n            Move up to parents of <NodeName node={toNode} />\n          </>\n        )\n      },\n      renderEmpty: () => 'No parents found',\n    },\n    parentEntries: {\n      getNodes: this.getParentEntryNodes,\n      renderTitle: () => 'Parent Entry Points',\n      renderInfo: () => {\n        const {toNode} = this.props\n        if (!toNode) return null\n        return (\n          <>\n            Move up to parent entries of <NodeName node={toNode} />\n          </>\n        )\n      },\n      renderEmpty: () => 'No entries found',\n    },\n    entries: {\n      getNodes: this.getEntryNodes,\n      renderTitle: () => 'Entry Modules',\n      renderInfo: () => 'Select entry module to start from',\n      renderEmpty: () => 'No modules found',\n    },\n  }\n\n  initialModes = {\n    initialAll: this.modes.all,\n    initialEntries: this.modes.entries,\n    initialLeafs: {\n      getNodes: this.getLeafNodes,\n      renderTitle: () => 'Leaf Modules',\n      renderInfo: () => 'Select modules without children',\n      renderEmpty: () => 'No modules found',\n    },\n  }\n\n  render() {\n    // const {} = this.state\n    const {\n      classes,\n      className,\n      fromNode,\n      toNode,\n      baseGraph,\n      graph,\n      pinned,\n      onNodeSelect,\n    } = this.props\n\n    return (\n      <GraphExplorer\n        className={classNames(classes.root, className)}\n        modes={fromNode && toNode ? this.modes : this.initialModes}\n        defaultMode={fromNode && toNode ? 'parents' : 'initialAll'}\n        baseGraph={baseGraph}\n        graph={graph}\n        pinned={pinned}\n        onNodeSelect={onNodeSelect}\n        selected={fromNode}\n      />\n    )\n  }\n}\n\nexport default withStyles(styles)(ParentsExplorer)\n","// @flow\n\nimport type {Node, NodeID, Graph} from '../../analysis/graph'\n\nimport * as React from 'react'\nimport classNames from 'classnames'\nimport {createSelector} from 'reselect'\nimport {withStyles} from '@material-ui/core'\n\nimport {getNodes, getAllNodes} from '../../analysis/graph'\nimport GraphExplorer from './GraphExplorer'\nimport NodeName from './NodeName'\nimport {keepOnlyLeafModules, getDeepNodeChildren} from '../../analysis/dependencies'\n\ntype Props = {|\n  baseGraph: Graph,\n  graph: Graph,\n  pinned: $ReadOnlyArray<NodeID>,\n  fromNode: ?Node,\n  toNode: ?Node,\n  onNodeSelect: NodeID => void,\n\n  className?: string,\n  classes: Object,\n|}\n\nconst styles = {\n  root: {},\n}\n\nclass ChildrenExplorer extends React.PureComponent<Props> {\n  allNodesSelector = createSelector((_, p) => p.graph, graph => getAllNodes(graph))\n  getAllNodes = () => this.allNodesSelector(this.state, this.props)\n\n  leafNodesSelector = createSelector(\n    (_, p) => p.graph,\n    graph => keepOnlyLeafModules(graph, getAllNodes(graph)),\n  )\n  getLeafNodes = () => this.leafNodesSelector(this.state, this.props)\n\n  directChildrenNodesSelector = createSelector(\n    (_, p) => p.graph,\n    (_, p) => p.toNode,\n    (graph, toNode) => {\n      if (!toNode) return []\n      return getNodes(graph, toNode.children)\n    },\n  )\n  getDirectChildrenNodes = () => this.directChildrenNodesSelector(this.state, this.props)\n\n  childrenNodesSelector = createSelector(\n    (_, p) => p.graph,\n    (_, p) => p.fromNode,\n    (graph, fromNode) => {\n      if (!fromNode) return []\n      return getDeepNodeChildren(graph, fromNode).then(ids => getNodes(graph, ids))\n    },\n  )\n  getChildrenNodes = () => this.childrenNodesSelector(this.state, this.props)\n\n  childLeafNodesSelector = createSelector(\n    (_, p) => p.graph,\n    this.childrenNodesSelector,\n    async (graph, nodes) => {\n      return keepOnlyLeafModules(graph, await nodes)\n    },\n  )\n  getChildLeafNodes = () => this.childLeafNodesSelector(this.state, this.props)\n\n  modes = {\n    all: {\n      getNodes: this.getAllNodes,\n      renderTitle: () => 'All Nodes',\n      renderInfo: () => 'Select node to start from',\n      renderEmpty: () => 'Nothing found',\n    },\n    directChildren: {\n      getNodes: this.getDirectChildrenNodes,\n      renderTitle: () => 'Direct Children',\n      renderInfo: () => {\n        const {toNode} = this.props\n        if (!toNode) return null\n        return (\n          <>\n            Move down to direct children of <NodeName node={toNode} />\n          </>\n        )\n      },\n      renderEmpty: () => 'No children found',\n    },\n    children: {\n      getNodes: this.getChildrenNodes,\n      renderTitle: () => 'All Children',\n      renderInfo: () => {\n        const {fromNode} = this.props\n        if (!fromNode) return null\n        return (\n          <>\n            Move down to children of <NodeName node={fromNode} />\n          </>\n        )\n      },\n      renderEmpty: () => 'No children found',\n    },\n    childLeafs: {\n      getNodes: this.getChildLeafNodes,\n      renderTitle: () => 'Child Leaf Modules',\n      renderInfo: () => {\n        const {fromNode} = this.props\n        if (!fromNode) return null\n        return (\n          <>\n            Move down to child leaf modules of <NodeName node={fromNode} />\n          </>\n        )\n      },\n      renderEmpty: () => 'No modules found',\n    },\n    leafs: {\n      getNodes: this.getLeafNodes,\n      renderTitle: () => 'Leaf Modules',\n      renderInfo: () => 'Select leaf module to finish at',\n      renderEmpty: () => 'No modules found',\n    },\n  }\n\n  render() {\n    const {\n      classes,\n      className,\n      fromNode,\n      toNode,\n      baseGraph,\n      graph,\n      pinned,\n      onNodeSelect,\n    } = this.props\n\n    return (\n      <GraphExplorer\n        className={classNames(classes.root, className)}\n        modes={this.modes}\n        defaultMode={'children'}\n        baseGraph={baseGraph}\n        graph={graph}\n        pinned={pinned}\n        onNodeSelect={onNodeSelect}\n        selected={toNode}\n        retainerRootNode={fromNode}\n      />\n    )\n  }\n}\n\nexport default withStyles(styles)(ChildrenExplorer)\n","// @flow\n\nimport type {NodeID, Node, Graph} from './analysis/graph'\nimport type {Change} from './analysis/changes'\n\nimport * as React from 'react'\nimport classNames from 'classnames'\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport Dropzone from 'react-dropzone'\nimport {\n  AppBar,\n  Typography,\n  Toolbar,\n  CssBaseline,\n  withStyles,\n  Button,\n  Drawer,\n  Icon,\n} from '@material-ui/core'\n\nimport ChainsExplorer from './ui/graph/ChainsExplorer'\nimport WarningBar from './ui/WarningBar'\nimport ErrorBar from './ui/ErrorBar'\nimport ChangesView from './ui/graph/ChangesView'\nimport EmptyBox from './ui/EmptyBox'\nimport ParentsExplorer from './ui/graph/ParentsExplorer'\nimport ChildrenExplorer from './ui/graph/ChildrenExplorer'\n\ntype Props = {|\n  loading: boolean,\n  baseGraph: ?Graph,\n  graph: ?Graph,\n  error: any,\n\n  fromNode: ?Node,\n  toNode: ?Node,\n  changes: $ReadOnlyArray<Change>,\n  showChanges: boolean,\n  pinned: $ReadOnlyArray<NodeID>,\n\n  onAddChange: Change => any,\n  onFromNodeSelect: NodeID => any,\n  onToNodeSelect: NodeID => any,\n  onNodesSelectionReset: () => any,\n  onChangesUpdate: ($ReadOnlyArray<Change>) => any,\n  onFileDrop: (files: File[], rejectedFiles: File[]) => any,\n  onShowChangesToggle: () => any,\n  onPinnedToggle: NodeID => any,\n  classes: Object,\n|}\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    height: '100vh',\n    minWidth: 1200,\n    flexDirection: 'column',\n    justifyContent: 'stretch',\n    fontFamily: ['Roboto', 'Helvetica', 'Arial', 'sans-serif'],\n  },\n  container: {\n    maxWidth: 2000,\n    minWidth: 1200,\n    width: '100vw',\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  },\n  panes: {\n    display: 'flex',\n    flexDirection: 'row',\n    flexGrow: 1,\n    justifyContent: 'space-between',\n    padding: '24px 24px 0 24px',\n  },\n  parentsExplorer: {\n    width: 250,\n    flexShrink: 0,\n    flexGrow: 0.2,\n    marginRight: 48,\n  },\n  pathsExplorer: {\n    flexShrink: 1,\n    flexGrow: 1,\n    marginRight: 48,\n  },\n  childrenExplorer: {\n    width: 250,\n    flexShrink: 0,\n    flexGrow: 0.2,\n  },\n  title: {\n    marginLeft: 'auto',\n    textTransform: 'uppercase',\n  },\n  search: {\n    color: '#fff',\n    borderBottom: '2px solid #fff',\n    width: 300,\n  },\n  dropzone: {},\n  openButton: {},\n  openFileMessage: {\n    textAlign: 'center',\n    width: '30em',\n    alignSelf: 'center',\n    margin: 'auto',\n    cursor: 'pointer',\n  },\n})\n\nclass AppUI extends React.Component<Props> {\n  dropzone: any\n\n  renderGraph() {\n    const {\n      baseGraph,\n      graph,\n      fromNode,\n      toNode,\n      pinned,\n      classes,\n      onFromNodeSelect,\n      onToNodeSelect,\n      onAddChange,\n      onPinnedToggle,\n    } = this.props\n    if (!graph || !baseGraph) return null\n    return (\n      <div className={classNames(classes.container, classes.panes)}>\n        <ParentsExplorer\n          className={classes.parentsExplorer}\n          baseGraph={baseGraph}\n          graph={graph}\n          pinned={pinned}\n          toNode={toNode}\n          fromNode={fromNode}\n          onNodeSelect={onFromNodeSelect}\n        />\n        {fromNode && toNode ? (\n          <ChainsExplorer\n            className={classes.pathsExplorer}\n            baseGraph={baseGraph}\n            graph={graph}\n            pinned={pinned}\n            fromNode={fromNode}\n            toNode={toNode}\n            onFromNodeSelect={onFromNodeSelect}\n            onToNodeSelect={onToNodeSelect}\n            onAddChange={onAddChange}\n            onPinnedToggle={onPinnedToggle}\n          />\n        ) : null}\n        {fromNode ? (\n          <ChildrenExplorer\n            className={classes.childrenExplorer}\n            baseGraph={baseGraph}\n            graph={graph}\n            pinned={pinned}\n            toNode={toNode}\n            fromNode={fromNode}\n            onNodeSelect={onToNodeSelect}\n          />\n        ) : null}\n      </div>\n    )\n  }\n\n  render() {\n    const {\n      loading,\n      error,\n      graph,\n      showChanges,\n      changes,\n      pinned,\n      fromNode,\n      classes,\n      onNodesSelectionReset,\n      onChangesUpdate,\n      onFileDrop,\n      onShowChangesToggle,\n    } = this.props\n    return (\n      <Dropzone\n        multiple={false}\n        activeClassName=\"\"\n        rejectClassName=\"\"\n        accept=\".json\"\n        onDrop={onFileDrop}\n        className={classes.dropzone}\n        disableClick\n        ref={node => {\n          this.dropzone = node\n        }}\n      >\n        <div className={classes.root}>\n          <CssBaseline />\n          <AppBar position=\"static\">\n            <Toolbar variant=\"regular\" className={classes.container}>\n              {!loading && (\n                <Button color=\"inherit\" onClick={() => this.dropzone.open()}>\n                  Open stats\n                </Button>\n              )}\n              {graph && (\n                <Button color=\"inherit\" onClick={onShowChangesToggle}>\n                  See changes\n                  {changes.length ? ` (${changes.length})` : null}\n                </Button>\n              )}\n              {fromNode && (\n                <Button color=\"inherit\" onClick={onNodesSelectionReset}>\n                  Choose root node\n                </Button>\n              )}\n              <Typography variant=\"title\" color=\"inherit\" className={classes.title}>\n                Webpack Chop Shop\n              </Typography>\n            </Toolbar>\n          </AppBar>\n          {loading && <LinearProgress className={classes.progress} />}\n          {graph &&\n            graph.errors.length > 0 && (\n              <WarningBar>\n                There where {graph.errors.length} errors found. Check the console for more\n              </WarningBar>\n            )}\n          {error && <ErrorBar>{String(error)}</ErrorBar>}\n          {this.renderGraph()}\n          {!graph &&\n            !loading && (\n              <div onClick={() => this.dropzone.open()} className={classes.openFileMessage}>\n                <EmptyBox\n                  icon={\n                    <Icon color=\"inherit\" fontSize=\"default\">\n                      open_in_browser\n                    </Icon>\n                  }\n                >\n                  First,{' '}\n                  <a\n                    href=\"https://webpack.js.org/api/cli/#stats-options\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    generate the stats file in webpack\n                  </a>\n                  , then click here or drop it anywhere on the page to start\n                </EmptyBox>\n              </div>\n            )}\n          {graph && (\n            <Drawer anchor=\"top\" open={showChanges} onClose={onShowChangesToggle}>\n              <div className={classes.container}>\n                <ChangesView\n                  graph={graph}\n                  changes={changes}\n                  pinned={pinned}\n                  onChangesUpdate={onChangesUpdate}\n                />\n              </div>\n            </Drawer>\n          )}\n        </div>\n      </Dropzone>\n    )\n  }\n}\n\nexport default withStyles(styles)(AppUI)\n","// @flow\n\nimport {createGraph, addNode, getNodeId, addEdge} from './graph'\n\nimport type {Graph} from './graph'\n\nexport async function readWebpackStats(\n  stats: Object,\n  options?: {\n    includeAsyncImports?: boolean,\n    includeChunks?: boolean,\n  } = {},\n): Promise<Graph> {\n  const graph = createGraph()\n  const {includeAsyncImports = false, includeChunks = false} = options\n\n  const {chunks = [], modules = []} = stats\n\n  // create chunks\n  if (includeChunks) {\n    for (const chunk of chunks) {\n      addNode(graph, {\n        id: getNodeId('chunk', chunk.id),\n        originalId: chunk.id,\n        kind: chunk.reason && chunk.reason.indexOf('split chunk') ? 'split-chunk' : 'chunk',\n        name: chunk.names[0],\n        size: 0,\n        original: chunk,\n      })\n      await graph.idle()\n    }\n  }\n\n  // create modules\n  for (const module of modules) {\n    if (module.id == null) {\n      // module has been removed at optimization phase (concatenated, tree-shaken, etc)\n      continue\n    }\n    const isConcat = module.name.indexOf(' + ') > 0\n    const isNamespace = module.name.indexOf(' namespace object') > 0\n    const kind = isConcat ? 'concat' : isNamespace ? 'namespace' : 'module'\n    addNode(graph, {\n      id: getNodeId('module', module.identifier),\n      originalId: module.id,\n      kind,\n      name: module.name,\n      file: isConcat ? undefined : (module.name || '').replace(/^.*!/),\n      size: module.size,\n      original: module,\n    })\n    await graph.idle()\n  }\n\n  // create edges\n  for (const module of modules) {\n    if (includeChunks) {\n      for (const chunkId of module.chunks) {\n        addEdge(graph, {\n          from: getNodeId('chunk', chunkId),\n          to: getNodeId('module', module.id),\n          kind: 'chunk child',\n          original: module,\n        })\n      }\n    }\n    for (const reason of module.reasons) {\n      const type = reason.type || ''\n      if (reason.moduleId == null) {\n        // reason has been removed at optimization phase (concatenated, tree-shaken, etc)\n        continue\n      }\n      const async = type.indexOf('import()') >= 0 && type.indexOf('eager') < 0\n      if (async && includeAsyncImports === false) {\n        continue\n      }\n      addEdge(graph, {\n        from: getNodeId('module', reason.moduleIdentifier),\n        to: getNodeId('module', module.identifier),\n        kind: type,\n        name: reason.userRequest,\n        async,\n        original: reason,\n      })\n    }\n    await graph.idle()\n  }\n  return graph\n}\n","// @flow\n\nimport type {NodeID, Graph} from './analysis/graph'\nimport type {Change} from './analysis/changes'\n\nimport * as React from 'react'\nimport {hot} from 'react-hot-loader'\nimport {isEqual, pick} from 'lodash'\n\nimport {readWebpackStats} from './analysis/webpack'\nimport {getNode, cloneGraph, abortGraph, resolveNode} from './analysis/graph'\nimport {applyChanges, addChange} from './analysis/changes'\nimport AppUI from './AppUI'\nimport {decodeUrlStateHash, encodeUrlStateHash} from './history'\n\nexport type AppState = {|\n  loading: boolean,\n  baseGraph: ?Graph,\n  graph: ?Graph,\n  error: any,\n\n  fromNodeId: ?NodeID,\n  toNodeId: ?NodeID,\n  changes: $ReadOnlyArray<Change>,\n  showChanges: boolean,\n  pinned: $ReadOnlyArray<NodeID>,\n|}\n\nclass App extends React.Component<{}, AppState> {\n  state = {\n    loading: false,\n    error: null,\n    baseGraph: null,\n    graph: null,\n    fromNodeId: null,\n    toNodeId: null,\n    changes: [],\n    showChanges: false,\n    pinned: [],\n  }\n\n  async componentDidMount() {\n    this.initLocalStorage()\n    this.initHistory()\n    if (process.env.REACT_APP_STATS) {\n      this.openFile(async () => {\n        console.time('loading')\n        const result = await fetch(`./${process.env.REACT_APP_STATS || ''}`)\n        console.timeEnd('loading')\n        console.time('parsing')\n        const json = await result.json()\n        console.timeEnd('parsing')\n        return json\n      })\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const hasNewBaseGraph = prevState.baseGraph !== this.state.baseGraph\n    const hasNewChanges = !isEqual(prevState.changes, this.state.changes)\n    if (hasNewBaseGraph || hasNewChanges) {\n      this.applyChanges()\n    }\n  }\n\n  initLocalStorage() {\n    try {\n      const pinned = JSON.parse(window.localStorage.getItem('pinned') || '[]')\n      const changes = JSON.parse(window.localStorage.getItem('changes') || '[]')\n      this.setState({pinned, changes})\n      window.addEventListener('storage', this.handleStorageEvent)\n    } catch (error) {\n      console.error('Local storage failed to initialize', error)\n    }\n  }\n\n  handleStorageEvent = (event: StorageEvent) => {\n    if (event.key === 'pinned' && event.newValue) {\n      const pinned = JSON.parse(event.newValue)\n      if (pinned !== this.state.pinned) {\n        this.setState({pinned})\n      }\n    }\n  }\n\n  initHistory() {\n    try {\n      window.addEventListener('popstate', this.handleHistoryChange)\n      this.handleHistoryChange()\n    } catch (error) {\n      console.error('History failed to initialize', error)\n    }\n  }\n\n  handleHistoryChange = () => {\n    const hash = (window.location.hash || '#').slice(1)\n    if (!hash) return\n    const hashState = decodeUrlStateHash(hash)\n    this.setState(pick(hashState, ['fromNodeId', 'toNodeId', 'changes', 'pinned']))\n  }\n\n  pushHistory = () => {\n    const {fromNodeId, toNodeId} = this.state\n    const encodedState = encodeUrlStateHash({fromNodeId, toNodeId})\n    window.history.pushState(null, null, `/#${encodedState}`)\n  }\n\n  openFile = async callback => {\n    this.setState({\n      loading: true,\n      error: null,\n      baseGraph: null,\n      graph: null,\n    })\n    try {\n      const json = await callback()\n      if (json === null) {\n        this.setState({loading: false})\n        return\n      }\n      console.time('conversion')\n      const graph = await readWebpackStats(json)\n      console.timeEnd('conversion')\n      console.log('Graph: ', graph)\n      console.warn('Errors found: ', graph.errors)\n      this.setState({loading: false, graph, baseGraph: graph})\n    } catch (error) {\n      console.error(error)\n      this.setState({loading: false, error})\n    }\n  }\n\n  handleDrop = ([file], [rejected]) => {\n    if (rejected) {\n      this.setState({error: 'Only webpack build stats in json format are accepted!'})\n      return\n    }\n    this.openFile(\n      () =>\n        new Promise((resolve, reject) => {\n          console.time('loading')\n          const reader = new FileReader()\n          reader.onload = () => {\n            console.timeEnd('loading')\n            console.time('parsing')\n            const json = JSON.parse((reader.result: any))\n            console.timeEnd('parsing')\n            resolve(json)\n          }\n          reader.onerror = () => {\n            console.timeEnd('loading')\n\n            reject('Could not read the file')\n          }\n          reader.readAsBinaryString(file)\n        }),\n    )\n  }\n\n  toggleShowChanges = () => {\n    this.setState({showChanges: !this.state.showChanges})\n  }\n\n  applyChanges = () => {\n    const {baseGraph, graph, changes} = this.state\n    if (!graph || !baseGraph) return\n    const newGraph = cloneGraph(baseGraph)\n    // discard old graph\n    if (graph !== baseGraph) {\n      abortGraph(graph)\n    }\n    applyChanges(newGraph, changes)\n    this.setState({graph: newGraph})\n  }\n\n  updateChanges = changes => {\n    this.setState({changes})\n    window.localStorage.setItem('changes', JSON.stringify(changes))\n  }\n\n  addChange = (change: Change) => {\n    const {graph, changes} = this.state\n    if (!graph) throw new Error('No graph available now')\n    this.updateChanges(addChange(graph, changes, change))\n  }\n\n  setNodesSelection = (fromNodeId: ?NodeID, toNodeId: ?NodeID) => {\n    this.setState({fromNodeId, toNodeId}, this.pushHistory)\n  }\n\n  resetNodesSelection = () => {\n    this.setNodesSelection(null, null)\n  }\n\n  selectFromNode = (fromNodeId: NodeID) => {\n    const {graph, toNodeId} = this.state\n    if (graph) console.log('Selected FROM node', getNode(graph, fromNodeId))\n    this.setNodesSelection(fromNodeId, toNodeId || fromNodeId)\n  }\n\n  selectToNode = (toNodeId: NodeID) => {\n    const {graph, fromNodeId} = this.state\n    if (graph) console.log('Selected TO node', getNode(graph, toNodeId))\n    this.setNodesSelection(fromNodeId || toNodeId, toNodeId)\n  }\n\n  togglePinned = (id: NodeID) => {\n    let {pinned} = this.state\n    const wasPinned = pinned.indexOf(id) >= 0\n    pinned = pinned.filter(pin => pin !== id)\n    if (!wasPinned) {\n      pinned = [id, ...pinned]\n    }\n    this.setState({pinned})\n    window.localStorage.setItem('pinned', JSON.stringify(pinned))\n  }\n\n  render() {\n    const {\n      graph,\n      baseGraph,\n      loading,\n      error,\n      fromNodeId,\n      toNodeId,\n      changes,\n      showChanges,\n      pinned,\n    } = this.state\n    return (\n      <AppUI\n        baseGraph={baseGraph}\n        graph={graph}\n        loading={loading}\n        error={error}\n        fromNode={graph && resolveNode(graph, fromNodeId)}\n        toNode={graph && resolveNode(graph, toNodeId)}\n        changes={changes}\n        showChanges={showChanges}\n        pinned={pinned}\n        onAddChange={this.addChange}\n        onFromNodeSelect={this.selectFromNode}\n        onToNodeSelect={this.selectToNode}\n        onNodesSelectionReset={this.resetNodesSelection}\n        onChangesUpdate={this.updateChanges}\n        onFileDrop={this.handleDrop}\n        onShowChangesToggle={this.toggleShowChanges}\n        onPinnedToggle={this.togglePinned}\n      />\n    )\n  }\n}\n\nexport default hot(module)(App)\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport registerServiceWorker from './registerServiceWorker'\n\nconst rootEl = document.getElementById('root')\n\nregisterServiceWorker()\nReactDOM.render(<App />, rootEl)\n","// @flow\n\nexport const encodeUrlStateHash = (state: Object) => btoa(JSON.stringify(state))\nexport const decodeUrlStateHash = (hash: string) => {\n  try {\n    const state = JSON.parse(atob(hash))\n    if (!state || typeof state !== 'object') throw new Error(`Url is not an object`)\n    return state\n  } catch (error) {\n    console.error('Decoding url failed', error)\n    return {}\n  }\n}\n","// @flow\nimport {throttle} from 'lodash'\n\nexport const ABORTED = Symbol('Aborted')\n\n//\nexport const backgroundProcessor = () => {\n  let abort\n  let idleReject\n  const fn = throttle(\n    () =>\n      new Promise((resolve, reject) => {\n        if (abort) reject(abort())\n        idleReject = reject\n        setTimeout(resolve, 0)\n        // requestIdleCallback(resolve)\n      }),\n    16,\n  )\n  fn.abort = (err = ABORTED) => {\n    return new Promise(resolve => {\n      abort = () => {\n        resolve()\n        return err\n      }\n      if (idleReject) idleReject(abort())\n    })\n  }\n  return fn\n}\n","// @flow\n\nimport {mapValues} from 'lodash'\nimport {backgroundProcessor} from './utils'\n\nexport type NodeID = string\nexport type EdgeID = string\nexport type NodeKind = string\nexport type EdgeKind = string\n\nexport type EdgeSpec = {|\n  name?: string,\n  from: NodeID,\n  to: NodeID,\n  kind: EdgeKind,\n  async?: boolean,\n  enabled?: boolean,\n  // Original source object\n  original?: any,\n|}\n\nexport type Edge = {\n  ...EdgeSpec,\n  enabled: boolean,\n}\n\nexport type NodeSpec = {|\n  id: NodeID,\n  originalId: string,\n  name?: string,\n  kind: NodeKind,\n  size: number,\n  file?: string,\n  // Original source object\n  original?: any,\n|}\n\nexport type Node = {\n  ...NodeSpec,\n  parents: Array<NodeID>,\n  children: Array<NodeID>,\n}\n\nexport type Graph = {|\n  nodes: {[NodeID]: Node},\n  edges: {[EdgeID]: Edge},\n  errors: Array<any>,\n  cache: Object,\n  idle: $Call<typeof backgroundProcessor>,\n|}\n\nexport function createGraph(): Graph {\n  return {\n    nodes: {},\n    edges: {},\n    errors: [],\n    cache: {},\n    idle: backgroundProcessor(),\n  }\n}\n\nexport function getNodeId(kind: string, id: string): NodeID {\n  return `${kind}:${id}`\n}\nexport function getEdgeId(from: NodeID, to: NodeID): EdgeID {\n  return `${from}->${to}`\n}\n\nexport function getNode(graph: Graph, id: NodeID): Node {\n  const node = graph.nodes[id]\n  if (!node) throw new Error(`Node ${id} not found`)\n  return node\n}\n\nexport function resolveNode(graph: Graph, id: ?NodeID): ?Node {\n  if (!id) return null\n  return graph.nodes[id] || null\n}\n\nexport function getEdge(graph: Graph, id: EdgeID): Edge {\n  const edge = graph.edges[id]\n  if (!edge) throw new Error(`Edge ${id} not found`)\n  return edge\n}\n\nexport function resolveEdge(graph: Graph, id: ?EdgeID): ?Edge {\n  if (!id) return null\n  return graph.edges[id] || null\n}\n\nexport function resolveEdgeForNodes(graph: Graph, from: ?NodeID, to: ?NodeID): ?Edge {\n  if (!from || !to) return null\n  return graph.edges[getEdgeId(from, to)]\n}\n\nexport function getNodes(graph: Graph, ids: $ReadOnlyArray<NodeID>): $ReadOnlyArray<Node> {\n  return ids.map(getNode.bind(null, graph))\n}\n\nexport function getAllNodes(graph: Graph): $ReadOnlyArray<Node> {\n  return (Object.values(graph.nodes): any)\n}\n\nexport function getEdges(graph: Graph, ids: $ReadOnlyArray<EdgeID>): $ReadOnlyArray<Edge> {\n  return ids.map(getEdge.bind(null, graph))\n}\n\nexport function getChildren(graph: Graph, node: Node): $ReadOnlyArray<Edge> {\n  return getEdges(graph, node.children.map(to => getEdgeId(node.id, to)))\n}\n\nexport function getParents(graph: Graph, node: Node): $ReadOnlyArray<Edge> {\n  return getEdges(graph, node.parents.map(from => getEdgeId(from, node.id)))\n}\n\nexport function addNode(graph: Graph, _node: NodeSpec): Node {\n  const node = {parents: [], children: [], ..._node}\n  if (graph.nodes[node.id]) throw new Error(`Node ${node.id} already in graph`)\n  graph.nodes[node.id] = node\n  return node\n}\n\nexport function addEdge(graph: Graph, _edge: EdgeSpec): Edge {\n  const edge = {enabled: true, ..._edge}\n  const id = getEdgeId(edge.from, edge.to)\n  if (graph.edges[id]) {\n    // graph.errors.push({\n    // message: 'Edge already in graph',\n    // edge,\n    // graphEdge: graph.edges[id],\n    // })\n    return graph.edges[id]\n  }\n  graph.edges[id] = edge\n  const from = getNode(graph, edge.from)\n  const to = getNode(graph, edge.to)\n  if (edge.enabled) {\n    from.children.push(edge.to)\n    to.parents.push(edge.from)\n  }\n  return edge\n}\n\nexport function toggleEdge(graph: Graph, edge: Edge, enabled: boolean) {\n  if (edge.enabled === enabled) return\n  const from = getNode(graph, edge.from)\n  const to = getNode(graph, edge.to)\n  if (enabled) {\n    from.children.push(edge.to)\n    to.parents.push(edge.from)\n  } else {\n    from.children = from.children.filter(id => id !== edge.to)\n    to.parents = to.parents.filter(id => id !== edge.from)\n  }\n  edge.enabled = enabled\n}\n\nexport function abortGraph(graph: Graph) {\n  return graph.idle.abort()\n}\n\nexport function cloneGraph(graph: Graph): Graph {\n  const newGraph = {\n    nodes: mapValues(graph.nodes, node => ({\n      ...node,\n      parents: [...node.parents],\n      children: [...node.children],\n    })),\n    edges: mapValues(graph.edges, edge => ({...edge})),\n    errors: [...graph.errors],\n    cache: {},\n    idle: backgroundProcessor(),\n  }\n  return newGraph\n}\n"],"sourceRoot":""}