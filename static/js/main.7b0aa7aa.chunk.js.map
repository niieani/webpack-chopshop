{"version":3,"sources":["analysis/changes.js","analysis/chains.js","ui/ErrorBox.js","analysis/dependencies.js","analysis/size.js","ui/graph/NodeSize.js","analysis/info.js","ui/graph/NodeName.js","ui/graph/NodeCard.js","ui/graph/EdgeLinkButton.js","ui/graph/ChainItem.js","ui/EmptyBox.js","ui/graph/ChainsList.js","ui/graph/ChainsExplorer.js","ui/WarningBar.js","ui/ErrorBar.js","ui/graph/ChangesView.js","ui/graph/NodeItem.js","ui/tree.js","ui/graph/NodeList.js","ui/graph/GraphExplorer.js","ui/graph/ParentsExplorer.js","ui/graph/ChildrenExplorer.js","AppUI.js","analysis/webpack.js","App.js","registerServiceWorker.js","index.js","history.js","analysis/utils.js","analysis/graph.js"],"names":["MOCKED_EDGE_KIND","addChange","graph","changes","change","newChanges","Object","lodash__WEBPACK_IMPORTED_MODULE_0__","edge","_graph__WEBPACK_IMPORTED_MODULE_1__","from","to","wasOriginallyEnabled","kind","enabled","push","applyChanges","fromNode","nodes","toNode","errors","message","async","findChains","gatherChains","node","toId","path","visited","currentPath","id","paths","children","indexOf","childId","result","analysis_graph","length","idle","ui_ErrorBox","styles","theme","root","background","palette","error","dark","color","contrastText","padding","display","align-items","flex-shrink","icon","margin-right","classes","undefined","String","react","className","index_es","label","walkGraph","options","nodesKey","getDeepNodeChildren","key","cache","then","keys","getRetainedNodes","rootNode","[object Object]","allChildrenPromise","rootsChildrenPromise","Promise","all","allChildren","rootsChildren","ids","lodash","keepOnlyLeafModules","filter","calculateTreeSize","tree","reduce","sum","size","calculateRetainedTreeSize","graph_NodeSize","bigger","red_default","a","A700","smaller","green_default","baseGraph","retainerRootNode","treeSizeCalculator","g","react_promise_es","promise","baseTreeSize","treeSize","title","enterDelay","numeral_default","format","Math","abs","pending","FILENAME_RE","getPackageName","file","found","match","graph_NodeName","maxWidth","flexDirection","whiteSpace","overflow","packageName","textOverflow","flexShrink","minWidth","name","extension","hidePackage","onlyPackage","tooltip","info","pathToPackage","getModuleInfo","replace","text","classnames_default","originalId","placement","disableFocusListener","graph_NodeCard","position","flexGrow","justifyContent","card","marginBottom","edgeButton","left","top","expand","transform","transition","transitions","create","duration","shortest","marginLeft","breakpoints","up","marginRight","expandOpen","args","_temp","super","this","state","expanded","render","_this$props","props","actions","variant","noWrap","disableActionSpacing","onClick","setState","in","gutterBottom","graph_EdgeLinkButton","aria-label","graph_ChainItem","width","link","chain","through","style","checked","dense","ContainerComponent","button","disableGutters","primary","secondary","primaryTypographyProps","ui_EmptyBox","alignItems","textAlign","margin-bottom","graph_ChainsList","list","outline","chains","selectedChain","onChainSelect","usedIds","finalChains","map","dist_es","height","rowCount","rowHeight","rowRenderer","index","_finalChains$index","every","noRowsRenderer","graph_ChainsExplorer","chainsList","selectedChainScroll","overflowY","listProgress","marginTop","chainsPromiseSelector","lib","p","_waitingForChainsPromise","renderSelectedChain","pinned","onAddChange","onFromNodeSelect","onToNodeSelect","onPinnedToggle","isFirst","isLast","prevNode","renderChains","_this$props2","componentDidMount","componentDidUpdate","prevProps","baseGraphChanged","_this$props3","currentFrom","currentTo","prevFrom","prevTo","fromToIdChanged","chainsPromise","_this$props4","catch","ui_WarningBar","amber_default","ui_ErrorBar","graph_ChangesView","maxHeight","delete","onChangesUpdate","textsToCopy","_window$location","window","location","origin","pathname","hash","currentUrlState","src_history","slice","shareUrl","encodeUrlStateHash","fromName","toName","react_copy_to_clipboard_lib","join","graph_NodeItem","selectFromNode","selectToNode","selectNode","defaultGetChildren","row","defaultGetKey","isTreeExpanded","_options$getKey","getKey","toggleTreeRowState","current","_options$getKey2","tree_objectSpread","e","toggleTreeRow","treeOptions","group","graph_NodeList","search","listContainer","fuseSelector","_","fuse_default","searchSelector","s","orderNodesBy","fuse","pinnedSelector","groupSelector","groupNodesBy","orderGroupsBy","rows","groups","unshift","nodesSelector","flattenTreeToRows","_options$getChildren","getChildren","renderList","renderItem","renderEmpty","divider","Boolean","loading","type","value","onChange","el","target","endAdornment","placeholder","graph_GraphExplorer","modeMenuItem","modeId","modeMenuAnchor","modeSelector","modes","defaultMode","getNodes","nodesPromiseSelector","resolve","handleModeMenuOpen","event","currentTarget","handleModeMenuClose","selected","onNodeSelect","mode","listProps","assign","itemProps","fontSize","renderModeMenu","_this$state","currentModeId","anchorEl","open","onClose","renderTitle","nodesPromise","header","renderInfo","headerMore","prepareEntryNodes","parents","parentId","ParentsExplorer_objectSpread","graph_ParentsExplorer","allNodesSelector","getAllNodes","entryNodesSelector","getEntryNodes","leafNodesSelector","getLeafNodes","directParentNodesSelector","getDirectParentNodes","parentNodesSelector","getDeepNodeParents","getParentNodes","parentEntryNodesSelector","getParentEntryNodes","directParents","parentEntries","entries","initialModes","initialAll","initialEntries","initialLeafs","graph_ChildrenExplorer","directChildrenNodesSelector","ChildrenExplorer_objectSpread","getDirectChildrenNodes","retainedChildrenNodesSelector","getChildrenNodes","getRetainedChildrenNodes","childrenNodesSelector","childLeafNodesSelector","getChildLeafNodes","retainedChildren","directChildren","childLeafs","leafs","__webpack_exports__","fontFamily","container","panes","parentsExplorer","pathsExplorer","childrenExplorer","textTransform","borderBottom","dropzone","openButton","openFileMessage","alignSelf","margin","cursor","renderGraph","showChanges","onNodesSelectionReset","onFileDrop","onShowChangesToggle","es","multiple","activeClassName","rejectClassName","accept","onDrop","disableClick","ref","LinearProgress_default","progress","href","rel","anchor","readWebpackStats","stats","_graph__WEBPACK_IMPORTED_MODULE_0__","_options$includeAsync","includeAsyncImports","_options$includeChunk","includeChunks","_stats$chunks","chunks","_stats$modules","modules","chunk","reason","names","original","module","isConcat","isNamespace","identifier","chunkId","reasons","moduleId","moduleIdentifier","userRequest","react_hot_loader__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_0__","fromNodeId","toNodeId","handleStorageEvent","newValue","JSON","parse","handleHistoryChange","hashState","_history__WEBPACK_IMPORTED_MODULE_7__","lodash__WEBPACK_IMPORTED_MODULE_2__","pushHistory","encodedState","history","pushState","openFile","json","callback","console","time","_analysis_webpack__WEBPACK_IMPORTED_MODULE_3__","timeEnd","log","warn","handleDrop","rejected","reject","reader","FileReader","onload","onerror","readAsBinaryString","toggleShowChanges","_this$state2","newGraph","_analysis_graph__WEBPACK_IMPORTED_MODULE_4__","_analysis_changes__WEBPACK_IMPORTED_MODULE_5__","updateChanges","localStorage","setItem","stringify","_this$state3","Error","setNodesSelection","resetNodesSelection","_this$state4","_this$state5","togglePinned","wasPinned","pin","initLocalStorage","initHistory","NODE_ENV","PUBLIC_URL","REACT_APP_STATS","fetch","prevState","hasNewBaseGraph","hasNewChanges","getItem","addEventListener","_this$state6","_AppUI__WEBPACK_IMPORTED_MODULE_6__","isLocalhost","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","rootEl","document","getElementById","URL","response","status","headers","get","ready","unregister","reload","react_dom_default","react_default","createElement","App","btoa","decodeUrlStateHash","atob","ABORTED","Symbol","backgroundProcessor","abort","idleReject","fn","setTimeout","err","createGraph","edges","getNodeId","getEdgeId","getNode","resolveNode","resolveEdgeForNodes","bind","values","addNode","_node","addEdge","_edge","toggleEdge","abortGraph","cloneGraph"],"mappings":"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","file":"static/js/main.7b0aa7aa.chunk.js","sourcesContent":["// @flow\n\nimport type {Graph, NodeID} from './graph'\n\nimport {reject, pick} from 'lodash'\nimport {toggleEdge, addEdge, resolveEdgeForNodes} from './graph'\n\nexport type EdgeChange = {|\n  change: 'edge',\n  from: NodeID,\n  to: NodeID,\n  enabled: boolean,\n|}\n\nexport type Change = EdgeChange\n\nexport const MOCKED_EDGE_KIND = 'mocked'\n\nexport function addChange(graph: Graph, changes: $ReadOnlyArray<Change>, change: Change) {\n  // Remove same changes from queue\n  const newChanges = reject(changes, pick(change, ['change', 'from', 'to']))\n  if (change.change === 'edge') {\n    const edge = resolveEdgeForNodes(graph, change.from, change.to)\n    const wasOriginallyEnabled = edge ? edge.kind !== MOCKED_EDGE_KIND : false\n    // Add to queue only if it's a different state than originally\n    if (change.enabled !== wasOriginallyEnabled) {\n      newChanges.push(change)\n    }\n  }\n  return newChanges\n}\n\nexport function applyChanges(graph: Graph, changes: $ReadOnlyArray<Change>) {\n  for (const change of changes) {\n    if (change.change === 'edge') {\n      const fromNode = graph.nodes[change.from]\n      const toNode = graph.nodes[change.to]\n      if (!fromNode || !toNode) {\n        graph.errors.push({message: `One of the nodes is missing, cannot apply the change`, change})\n        continue\n      }\n\n      let edge = resolveEdgeForNodes(graph, change.from, change.to)\n      if (!edge) {\n        edge = addEdge(graph, {\n          from: change.from,\n          to: change.to,\n          enabled: change.enabled,\n          kind: MOCKED_EDGE_KIND,\n        })\n      }\n      toggleEdge(graph, edge, change.enabled)\n    }\n  }\n}\n","// @flow\n\nimport type {Graph, Node, NodeID} from './graph'\nimport {getNode} from './graph'\n\nexport type EdgeChain = NodeID[]\n\nasync function gatherChains(\n  graph: Graph,\n  node: Node,\n  toId: NodeID,\n  path: NodeID[],\n  visited: {[NodeID]: boolean},\n) {\n  const currentPath = [...path, node.id]\n  if (node.id === toId) return [currentPath]\n\n  visited[node.id] = true\n  const paths = []\n\n  // prefer shortes paths first\n  if (node.children.indexOf(toId) >= 0) {\n    paths.push([...currentPath, toId])\n  }\n\n  for (const childId of node.children) {\n    if (visited[childId]) continue\n    if (childId === toId) continue\n    const result = await gatherChains(graph, getNode(graph, childId), toId, currentPath, visited)\n    if (result.length > 0) {\n      paths.push(...result)\n    }\n    await graph.idle()\n  }\n  return paths\n}\n\nexport async function findChains(graph: Graph, fromNode: Node, toNode: Node): Promise<EdgeChain[]> {\n  return gatherChains(graph, fromNode, toNode.id, [], {})\n}\n","// @flow\n\nimport * as React from 'react'\nimport {withStyles, Icon} from '@material-ui/core'\n\ntype Props = {|\n  error?: any,\n  children?: React.Node,\n  classes: Object,\n|}\n\nconst styles = theme => ({\n  root: {\n    background: theme.palette.error.dark,\n    color: theme.palette.error.contrastText,\n    padding: 16,\n    display: 'flex',\n    'align-items': 'center',\n    'flex-shrink': 0,\n  },\n  icon: {\n    'margin-right': 8,\n  },\n})\n\nconst ErrorBox = ({classes, error, children}: Props) => {\n  if (children === undefined) children = String(error)\n  return (\n    <div className={classes.root}>\n      <Icon className={classes.icon}>error</Icon>\n      <span className={classes.label}>\n        {React.isValidElement(children) ? children : String(children)}\n      </span>\n    </div>\n  )\n}\n\nexport default withStyles(styles)(ErrorBox)\n","// @flow\n\nimport {difference} from 'lodash'\nimport type {Graph, Node, NodeID} from './graph'\nimport {getNode} from './graph'\n\nasync function walkGraph(\n  graph: Graph,\n  node: Node,\n  options: {visited: {[NodeID]: boolean}, nodesKey: string},\n) {\n  options.visited[node.id] = true\n\n  for (const childId of node[options.nodesKey]) {\n    if (options.visited[childId]) continue\n    await walkGraph(graph, getNode(graph, childId), options)\n    await graph.idle()\n  }\n}\n\nexport function getDeepNodeChildren(graph: Graph, node: Node): Promise<$ReadOnlyArray<NodeID>> {\n  const key = `getDeepNodeChildren:${node.id}`\n  if (!graph.cache[key]) {\n    const visited = {}\n    graph.cache[key] = walkGraph(graph, node, {visited, nodesKey: 'children'}).then(() => {\n      // $FlowFixMe\n      delete visited[node.id]\n      return Object.keys(visited)\n    })\n  }\n  return graph.cache[key]\n}\n\nexport function getDeepNodeParents(graph: Graph, node: Node): Promise<$ReadOnlyArray<NodeID>> {\n  const key = `getDeepNodeParents:${node.id}`\n  if (!graph.cache[key]) {\n    const visited = {}\n    graph.cache[key] = walkGraph(graph, node, {visited, nodesKey: 'parents'}).then(() => {\n      // $FlowFixMe\n      delete visited[node.id]\n      return Object.keys(visited)\n    })\n  }\n  return graph.cache[key]\n}\n\n// Returns all nodes introduced to the dependency tree of rootNode by adding the node to it.\n// In another word - how many modules are retained in the dependency tree because of the `node`\n// Does not include the node itself\nexport function getRetainedNodes(\n  graph: Graph,\n  rootNode: Node,\n  node: Node,\n): Promise<$ReadOnlyArray<NodeID>> {\n  const key = `getRetainedNodes:${rootNode.id}:${node.id}`\n  if (!graph.cache[key]) {\n    const visited = {\n      [node.id]: true,\n    }\n    const allChildrenPromise = getDeepNodeChildren(graph, rootNode)\n    const rootsChildrenPromise = walkGraph(graph, rootNode, {visited, nodesKey: 'children'}).then(\n      () => {\n        return Object.keys(visited)\n      },\n    )\n    graph.cache[key] = Promise.all([allChildrenPromise, rootsChildrenPromise]).then(\n      ([allChildren, rootsChildren]) => {\n        // If they're not connected - there's no retention\n        if (allChildren.indexOf(node.id) < 0) {\n          return []\n        }\n        // All children in the tree except the ones connected to the root\n        const ids = difference(allChildren, rootsChildren)\n        ids.push(node.id)\n        return ids\n      },\n    )\n  }\n  return graph.cache[key]\n}\n\nexport function keepOnlyEntryModules(graph: Graph, nodes: $ReadOnlyArray<Node>) {\n  return nodes.filter((node: Node) => {\n    if (node.kind !== 'module') return false\n    return node.parents.every(parentId => getNode(graph, parentId).kind !== 'module')\n  })\n}\n\nexport function keepOnlyLeafModules(graph: Graph, nodes: $ReadOnlyArray<Node>) {\n  return nodes.filter((node: Node) => {\n    if (node.kind !== 'module') return false\n    return node.children.length === 0\n  })\n}\n","// @flow\n\nimport type {Graph, Node, NodeID} from './graph'\nimport {getNode} from './graph'\nimport {getDeepNodeChildren, getRetainedNodes} from './dependencies'\n\nexport type EdgePath = NodeID[]\n\nexport function calculateTreeSize(graph: Graph, node: Node): Promise<number> {\n  const key = `calculateTreeSize:${node.id}`\n\n  if (!graph.cache[key]) {\n    graph.cache[key] = getDeepNodeChildren(graph, node).then(tree =>\n      tree.reduce((sum, id) => sum + getNode(graph, id).size, node.size),\n    )\n  }\n  return graph.cache[key]\n}\n\nexport function calculateRetainedTreeSize(\n  graph: Graph,\n  rootNode: Node,\n  node: Node,\n): Promise<number> {\n  const key = `calculateRetainedTreeSize:${rootNode.id}:${node.id}`\n\n  if (!graph.cache[key]) {\n    graph.cache[key] = getRetainedNodes(graph, rootNode, node).then(tree =>\n      tree.reduce((sum, id) => sum + getNode(graph, id).size, 0),\n    )\n  }\n  return graph.cache[key]\n}\n","// @flow\nimport type {Graph, Node} from '../../analysis/graph'\n\nimport * as React from 'react'\nimport numeral from 'numeral'\nimport Async from 'react-promise'\nimport {withStyles, Tooltip} from '@material-ui/core'\nimport red from '@material-ui/core/colors/red'\nimport green from '@material-ui/core/colors/green'\n\nimport {calculateTreeSize, calculateRetainedTreeSize} from '../../analysis/size'\n\ntype Props = {|\n  baseGraph: Graph,\n  graph: Graph,\n  retainerRootNode?: ?Node,\n  node: Node,\n  classes: Object,\n|}\n\nconst styles = theme => ({\n  bigger: {\n    color: red.A700,\n  },\n  smaller: {\n    color: green.A700,\n  },\n})\n\nfunction NodeSize({baseGraph, graph, node, retainerRootNode, classes}: Props) {\n  const treeSizeCalculator = retainerRootNode\n    ? g => calculateRetainedTreeSize(g, retainerRootNode, node)\n    : g => calculateTreeSize(g, node)\n  return (\n    <Async\n      promise={Promise.all([\n        baseGraph ? treeSizeCalculator(baseGraph) : undefined,\n        treeSizeCalculator(graph),\n      ])}\n      then={([baseTreeSize, treeSize]) => (\n        <>\n          {!retainerRootNode || treeSize > 0 ? (\n            <>\n              <Tooltip title=\"Node size\" enterDelay={500}>\n                <span>{numeral(node.size).format('0[.]0b')}</span>\n              </Tooltip>\n              {' + '}\n              <Tooltip\n                title={retainerRootNode ? 'Size of retained dependencies ' : 'Size of dependencies'}\n                enterDelay={500}\n              >\n                <span>{numeral(treeSize - node.size).format('0[.]0b')}</span>\n              </Tooltip>\n            </>\n          ) : (\n            'unrelated'\n          )}\n          {baseTreeSize != null && treeSize !== baseTreeSize ? (\n            <Tooltip title=\"Difference without changes\" enterDelay={500}>\n              <span className={treeSize > baseTreeSize ? classes.bigger : classes.smaller}>\n                {' ('}\n                {treeSize > baseTreeSize ? '+' : '-'}\n                {numeral(Math.abs(treeSize - baseTreeSize)).format('0[.]0b')}\n                {')'}\n              </span>\n            </Tooltip>\n          ) : null}\n        </>\n      )}\n      pending={'...'}\n    />\n  )\n}\nexport default withStyles(styles)(NodeSize)\n","// @flow\n\nimport type {Node, NodeID} from './graph'\n\nexport type EdgePath = NodeID[]\n\n// https://regex101.com/r/yU5wqf/2\n// 1 - path to packages dir (null if no package)\n// 2 - package name (null if no package)\n// 3 - directory in package\n// 4 - filename\n// 5 - extension\nconst FILENAME_RE = /^(?:(.*\\/(?:node_modules|web_modules|packages|~)\\/)((?:@[^/]+?\\/)?[^/]+))?(.*?\\/)?([^/]+)?(\\.[^./]+)?$/\n\ntype ModuleInfo = {|\n  pathToPackage?: string,\n  packageName?: string,\n  path?: string,\n  name?: string,\n  extension?: string,\n|}\n\nexport function getModuleInfo({file, name, id}: Node): ModuleInfo {\n  if (!file) {\n    return {name: name || String(id) || '(unknown)'}\n  }\n  const found = file.match(FILENAME_RE)\n  if (!found) {\n    return {path: file}\n  }\n  return {\n    pathToPackage: found[1],\n    packageName: found[2],\n    path: found[3],\n    name: found[4],\n    extension: found[5],\n  }\n}\n\nexport function getPackageName({file}: Node): string {\n  if (!file) return ''\n  const found = file.match(FILENAME_RE)\n  return found ? found[2] : ''\n}\n\nexport function getPackageRelativeFilePath(node: Node): string {\n  const {file} = node\n  if (!file) return ''\n  const pkg = getPackageName(node)\n  if (!pkg) return ''\n  return file.slice(file.indexOf(pkg) + pkg.length + 1)\n}\n\nexport function isExternal({file}: Node): boolean {\n  if (!file) return false\n  return file.indexOf('/node_modules/') >= 0\n}\n\nexport function getFileExtension({file}: Node): string {\n  if (!file) return ''\n  const dot = file.lastIndexOf('.')\n  if (dot <= 0) return ''\n  return file.slice(dot + 1)\n}\n","// @flow\nimport type {Node} from '../../analysis/graph'\n\nimport * as React from 'react'\nimport classNames from 'classnames'\nimport {withStyles, Tooltip} from '@material-ui/core'\n\nimport {getModuleInfo} from '../../analysis/info'\n\ntype Props = {|\n  node: Node,\n  hidePackage?: boolean,\n  onlyPackage?: boolean,\n  tooltip?: boolean | string,\n  children?: React.Node,\n  classes: Object,\n  className?: string,\n|}\n\nconst styles = theme => ({\n  root: {\n    maxWidth: '100%',\n    display: 'inline-flex',\n    flexDirection: 'row',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n  },\n  packageName: {\n    textOverflow: 'ellipsis',\n    flexShrink: 10,\n    overflow: 'hidden',\n  },\n  path: {\n    textOverflow: 'ellipsis',\n    flexShrink: 1000,\n    overflow: 'hidden',\n    minWidth: 10,\n  },\n  name: {\n    textOverflow: 'ellipsis',\n    flexShrink: 1,\n    overflow: 'hidden',\n  },\n  extension: {\n    flexShrink: 0,\n  },\n})\n\nfunction NodeName({node, hidePackage, onlyPackage, tooltip, children, classes, className}: Props) {\n  // {selectFromNode && <a onClick={() => selectFromNode(node.id)}>From</a>}\n  // {selectToNode && <a onClick={() => selectToNode(node.id)}>To</a>}\n\n  const info = getModuleInfo(node)\n\n  const packageName = hidePackage ? '' : info.packageName\n  const path = onlyPackage ? '' : (info.path || '').replace(/^\\/|\\/$/g, '')\n  const name = onlyPackage ? '' : (info.name || '') + (info.extension || '')\n\n  const text = (\n    <span className={classNames(className, classes.root)}>\n      {packageName && <span className={classes.packageName}>{packageName}</span>}\n      {packageName && path ? '/' : ''}\n      {path && <span className={classes.path}>{path}</span>}\n      {(packageName || path) && name ? '/' : ''}\n      {name && <span className={classes.name}>{name}</span>}\n      {(packageName || name) && children ? <span>,&nbsp;</span> : ''}\n      {children && <span className={classes.children}>{children}</span>}\n    </span>\n  )\n\n  if (tooltip) {\n    return (\n      <Tooltip\n        title={\n          typeof tooltip === 'boolean'\n            ? `${node.kind}: ${node.name || ''} (${String(node.originalId)})`\n            : tooltip\n        }\n        placement=\"top\"\n        enterDelay={100}\n        disableFocusListener\n      >\n        {text}\n      </Tooltip>\n    )\n  }\n\n  return text\n}\nexport default withStyles(styles)(NodeName)\n","// @flow\n\nimport type {Graph, Node, Edge} from '../../analysis/graph'\n\nimport * as React from 'react'\nimport classNames from 'classnames'\nimport {\n  withStyles,\n  Typography,\n  IconButton,\n  Icon,\n  Card,\n  CardContent,\n  Collapse,\n  CardActions,\n} from '@material-ui/core'\n\nimport NodeSize from './NodeSize'\nimport NodeName from './NodeName'\n\ntype Props = {|\n  baseGraph: Graph,\n  graph: Graph,\n  node: Node,\n  retainerRootNode?: ?Node,\n  edge?: ?Edge,\n  actions?: React.Node,\n  classes: Object,\n  className?: string,\n|}\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    position: 'relative',\n    flexDirection: 'column',\n    flexShrink: 0,\n    flexGrow: 0,\n    justifyContent: 'stretch',\n  },\n  card: {\n    marginBottom: 24,\n    position: 'relative',\n  },\n  edgeButton: {\n    position: 'absolute',\n    left: -32,\n    top: 12,\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n    marginLeft: 'auto',\n    [theme.breakpoints.up('sm')]: {\n      marginRight: -8,\n    },\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n})\n\ntype State = {\n  expanded: boolean,\n}\n\nclass NodeCard extends React.PureComponent<Props, State> {\n  state = {\n    expanded: false,\n  }\n  render() {\n    const {classes, className, baseGraph, graph, node, retainerRootNode, edge, actions} = this.props\n    const {expanded} = this.state\n\n    return (\n      <div className={classNames(className, classes.root)}>\n        <Card className={classes.card}>\n          <CardContent>\n            <Typography variant=\"headline\" noWrap>\n              <NodeName node={node} hidePackage tooltip />\n            </Typography>\n            <Typography variant=\"subheading\">\n              <NodeName node={node} onlyPackage />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              <NodeSize\n                baseGraph={baseGraph}\n                graph={graph}\n                node={node}\n                retainerRootNode={retainerRootNode}\n              />\n            </Typography>\n          </CardContent>\n          <CardActions className={classes.actions} disableActionSpacing>\n            {actions}\n            <IconButton\n              className={classNames(classes.expand, expanded && classes.expandOpen)}\n              onClick={() => this.setState({expanded: !expanded})}\n            >\n              <Icon>expand_more</Icon>\n            </IconButton>\n          </CardActions>\n          <Collapse in={expanded}>\n            <CardContent>\n              <Typography variant=\"caption\" color=\"textSecondary\">\n                Name\n              </Typography>\n              <Typography variant=\"body2\" gutterBottom>\n                {node.name}\n              </Typography>\n              <Typography variant=\"caption\" color=\"textSecondary\">\n                Kind\n              </Typography>\n              <Typography variant=\"body2\" gutterBottom>\n                {String(node.kind)}\n              </Typography>\n              <Typography variant=\"caption\" color=\"textSecondary\">\n                ID\n              </Typography>\n              <Typography variant=\"body2\" gutterBottom>\n                {String(node.originalId)}\n              </Typography>\n              {edge && (\n                <>\n                  <Typography variant=\"caption\" color=\"textSecondary\">\n                    Edge type\n                  </Typography>\n                  <Typography variant=\"body2\" gutterBottom>\n                    {edge.kind}\n                  </Typography>\n                  <Typography variant=\"caption\" color=\"textSecondary\">\n                    Edge name\n                  </Typography>\n                  <Typography variant=\"body2\" gutterBottom>\n                    {edge.name || ''}\n                  </Typography>\n                </>\n              )}\n            </CardContent>\n          </Collapse>\n        </Card>\n      </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(NodeCard)\n","// @flow\n\nimport type {Edge} from '../../analysis/graph'\n\nimport * as React from 'react'\nimport classNames from 'classnames'\nimport {withStyles, Icon, IconButton, Tooltip} from '@material-ui/core'\n\ntype Props = {|\n  edge: Edge,\n  onClick: Function,\n  classes: Object,\n  className?: string,\n|}\n\nconst styles = theme => ({\n  root: {},\n})\n\nclass EdgeLinkButton extends React.PureComponent<Props> {\n  render() {\n    const {classes, className, edge, onClick} = this.props\n\n    return (\n      <Tooltip\n        title={`${edge.enabled ? 'Unlink' : 'Link'} this node with above one`}\n        disableFocusListener\n        placement=\"top\"\n        enterDelay={500}\n      >\n        <IconButton\n          className={classNames(className, classes.root)}\n          aria-label=\"Unlink\"\n          color={edge.enabled ? 'secondary' : 'default'}\n          onClick={onClick}\n        >\n          <Icon>{edge.enabled ? 'link_off' : 'link'}</Icon>\n        </IconButton>\n      </Tooltip>\n    )\n  }\n}\n\nexport default withStyles(styles)(EdgeLinkButton)\n","// @flow\n\nimport type {Graph, NodeID} from '../../analysis/graph'\n\nimport * as React from 'react'\nimport {withStyles, ListItem, ListItemText} from '@material-ui/core'\n\nimport {getNode} from '../../analysis/graph'\nimport NodeName from './NodeName'\n\ntype Props = {|\n  graph: Graph,\n  chain: $ReadOnlyArray<NodeID>,\n  through: $ReadOnlyArray<NodeID>,\n  checked?: boolean,\n\n  onClick: Function,\n\n  style: Object,\n  classes: Object,\n|}\n\nconst styles = theme => ({\n  root: {},\n  nodes: {\n    display: 'flex',\n    flexDirection: 'row',\n  },\n  node: {\n    width: 300,\n    marginRight: 24,\n    position: 'relative',\n  },\n  link: {\n    position: 'absolute',\n    left: -24,\n    top: 0,\n  },\n})\n\nfunction ChainItem({graph, chain, through, onClick, style, classes, checked}: Props) {\n  return (\n    <div style={style}>\n      <ListItem dense ContainerComponent=\"div\" button onClick={onClick} disableGutters>\n        <ListItemText\n          primary={through.length ? <NodeName node={getNode(graph, through[0])} /> : 'Direct'}\n          secondary={`${chain.length - 1} nodes deep`}\n          primaryTypographyProps={{noWrap: true, color: checked ? 'secondary' : 'default'}}\n        />\n      </ListItem>\n    </div>\n  )\n}\n\nexport default withStyles(styles)(ChainItem)\n","// @flow\n\nimport * as React from 'react'\nimport {withStyles} from '@material-ui/core'\n\ntype Props = {|\n  children: React.Node,\n  icon: React.Node,\n  classes: Object,\n|}\n\nconst styles = theme => ({\n  root: {\n    color: theme.palette.text.secondary,\n    padding: 24,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexShrink: 0,\n    textAlign: 'center',\n  },\n  icon: {\n    'margin-bottom': 8,\n  },\n})\n\nconst EmptyBox = ({classes, children, icon}: Props) => (\n  <div className={classes.root}>\n    <div className={classes.icon}>{icon}</div>\n    <div>{children}</div>\n  </div>\n)\n\nexport default withStyles(styles)(EmptyBox)\n","// @flow\n\nimport type {Graph, Node, NodeID} from '../../analysis/graph'\n\nimport * as React from 'react'\nimport classNames from 'classnames'\nimport {difference} from 'lodash'\nimport {List, AutoSizer} from 'react-virtualized'\nimport {withStyles, Icon} from '@material-ui/core'\n\nimport ChainItem from './ChainItem'\nimport EmptyBox from '../EmptyBox'\n\ntype Props = {|\n  graph: Graph,\n  fromNode: Node,\n  toNode: Node,\n  chains: $ReadOnlyArray<$ReadOnlyArray<NodeID>>,\n  selectedChain: $ReadOnlyArray<NodeID>,\n  onChainSelect: (nodes: $ReadOnlyArray<NodeID>) => void,\n  classes: Object,\n  className?: string,\n|}\n\nconst styles = theme => ({\n  root: {\n    position: 'relative',\n  },\n  list: {\n    outline: 0,\n  },\n})\n\nfunction ChainsList(props: Props) {\n  const {classes, className, graph, chains, fromNode, toNode, selectedChain, onChainSelect} = props\n  const usedIds = [fromNode.id, toNode.id]\n  const finalChains = chains.map(chain => {\n    const through = difference(chain, usedIds)\n    usedIds.push(...through)\n    return {through, chain}\n  })\n\n  return (\n    <div className={classNames(className, classes.root)}>\n      <AutoSizer>\n        {({width, height}) => (\n          <List\n            className={classes.list}\n            width={width}\n            height={height}\n            rowCount={finalChains.length}\n            rowHeight={54}\n            rowRenderer={({index, style}) => {\n              const {chain, through} = finalChains[index]\n              return (\n                <ChainItem\n                  key={index}\n                  graph={graph}\n                  chain={chain}\n                  through={through}\n                  onClick={() => onChainSelect(chain)}\n                  style={style}\n                  checked={selectedChain.every((id, index) => chain[index] === id)}\n                />\n              )\n            }}\n            noRowsRenderer={() => (\n              <EmptyBox icon={<Icon>link_off</Icon>}>\n                There is no connection between these nodes\n              </EmptyBox>\n            )}\n          />\n        )}\n      </AutoSizer>\n    </div>\n  )\n}\n\nexport default withStyles(styles)(ChainsList)\n","// @flow\n\nimport type {Graph, Node, NodeID} from '../../analysis/graph'\nimport type {Change} from '../../analysis/changes'\nimport classNames from 'classnames'\n\nimport * as React from 'react'\nimport {createSelector} from 'reselect'\nimport Async from 'react-promise'\nimport {withStyles, Typography, LinearProgress, IconButton, Icon, Tooltip} from '@material-ui/core'\n\nimport {findChains} from '../../analysis/chains'\nimport ErrorBox from '../ErrorBox'\nimport NodeCard from './NodeCard'\nimport {getNodes, resolveEdgeForNodes} from '../../analysis/graph'\nimport EdgeLinkButton from './EdgeLinkButton'\nimport ChainsList from './ChainsList'\n\ntype Props = {|\n  baseGraph: Graph,\n  graph: Graph,\n  fromNode: ?Node,\n  toNode: ?Node,\n  pinned: $ReadOnlyArray<NodeID>,\n  onPinnedToggle: NodeID => any,\n  onAddChange: Change => any,\n  onFromNodeSelect: NodeID => any,\n  onToNodeSelect: NodeID => any,\n  classes: Object,\n  className?: string,\n|}\n\ntype State = {\n  selectedChain: ?$ReadOnlyArray<NodeID>,\n}\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    position: 'relative',\n    flexDirection: 'row',\n    justifyContent: 'stretch',\n  },\n\n  chains: {\n    width: 300,\n    flexGrow: 0.2,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'stretch',\n    marginRight: 24,\n  },\n  chainsList: {\n    flexGrow: 1,\n  },\n  selectedChain: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n    position: 'relative',\n    width: 300,\n  },\n  selectedChainScroll: {\n    overflowY: 'auto',\n    padding: '0 8px 0 8px',\n  },\n  listProgress: {\n    marginTop: 16,\n  },\n})\n\nclass ChainsExplorer extends React.PureComponent<Props, State> {\n  state = {\n    selectedChain: null,\n  }\n\n  chainsPromiseSelector = createSelector(\n    p => p.graph,\n    p => p.fromNode,\n    p => p.toNode,\n    (graph, fromNode, toNode) => {\n      if (!fromNode || !toNode) return null\n      return findChains(graph, fromNode, toNode)\n    },\n  )\n\n  componentDidMount() {\n    this.componentDidUpdate({})\n  }\n\n  _waitingForChainsPromise: any\n  async componentDidUpdate(prevProps) {\n    const baseGraphChanged = this.props.baseGraph !== prevProps.baseGraph\n    const {fromNode: currentFrom, toNode: currentTo} = this.props\n    const {fromNode: prevFrom, toNode: prevTo} = prevProps\n    const fromToIdChanged =\n      (currentFrom && currentFrom.id) !== (prevFrom && prevFrom.id) ||\n      (currentTo && currentTo.id) !== (prevTo && prevTo.id)\n    if (baseGraphChanged || fromToIdChanged) {\n      // Select the first chain whenever nodes or base graph changes,\n      // but keep it if user edits the graph\n      const chainsPromise = this.chainsPromiseSelector(this.props)\n      this.setState({\n        selectedChain: null,\n      })\n      this._waitingForChainsPromise = chainsPromise\n      if (currentFrom && currentTo && chainsPromise) {\n        const chains = await chainsPromise\n        if (this._waitingForChainsPromise !== chainsPromise) return\n        this.setState({selectedChain: chains[0] || [currentFrom.id, currentTo.id]})\n      }\n    }\n  }\n\n  renderSelectedChain = () => {\n    const {\n      baseGraph,\n      graph,\n      pinned,\n      fromNode,\n      onAddChange,\n      onFromNodeSelect,\n      onToNodeSelect,\n      onPinnedToggle,\n    } = this.props\n    const {selectedChain} = this.state\n    if (!selectedChain) return null\n    const nodes = getNodes(graph, selectedChain)\n\n    return nodes.map((node: Node, index) => {\n      const isFirst = index === 0\n      const isLast = index === nodes.length - 1\n      if (isFirst) return null\n      const prevNode = nodes[index - 1]\n      const edge = resolveEdgeForNodes(graph, prevNode.id, node.id) || {\n        from: prevNode.id,\n        to: node.id,\n        kind: '',\n        enabled: false,\n      }\n\n      return (\n        <>\n          <NodeCard\n            baseGraph={baseGraph}\n            graph={graph}\n            node={node}\n            retainerRootNode={fromNode}\n            edge={edge}\n            actions={\n              <>\n                <EdgeLinkButton\n                  edge={edge}\n                  onClick={() =>\n                    onAddChange({\n                      change: 'edge',\n                      from: edge.from,\n                      to: edge.to,\n                      enabled: !edge.enabled,\n                    })\n                  }\n                />\n                <Tooltip\n                  title=\"Set as the first node\"\n                  disableFocusListener\n                  enterDelay={500}\n                  placement=\"top\"\n                >\n                  <IconButton onClick={() => onFromNodeSelect(node.id)}>\n                    <Icon>vertical_align_top</Icon>\n                  </IconButton>\n                </Tooltip>\n                {!isLast && (\n                  <Tooltip\n                    title=\"Set as the last node\"\n                    disableFocusListener\n                    enterDelay={500}\n                    placement=\"top\"\n                  >\n                    <IconButton onClick={() => onToNodeSelect(node.id)}>\n                      <Icon>vertical_align_bottom</Icon>\n                    </IconButton>\n                  </Tooltip>\n                )}\n                <IconButton onClick={() => onPinnedToggle(node.id)}>\n                  <Icon>{pinned.indexOf(node.id) >= 0 ? 'star' : 'star_border'}</Icon>\n                </IconButton>\n              </>\n            }\n          />\n        </>\n      )\n    })\n  }\n\n  renderChains = chains => {\n    const {graph, fromNode, toNode, classes} = this.props\n    const {selectedChain} = this.state\n    if (!selectedChain || !fromNode || !toNode) return null\n    return (\n      <ChainsList\n        className={classes.chainsList}\n        graph={graph}\n        fromNode={fromNode}\n        toNode={toNode}\n        chains={chains}\n        selectedChain={selectedChain}\n        onChainSelect={chain => this.setState({selectedChain: chain})}\n      />\n    )\n  }\n\n  render() {\n    const {\n      className,\n      classes,\n      baseGraph,\n      graph,\n      fromNode,\n      toNode,\n      pinned,\n      onPinnedToggle,\n      onToNodeSelect,\n    } = this.props\n    const chainsPromise = this.chainsPromiseSelector(this.props)\n\n    return (\n      <div className={classNames(className, classes.root)}>\n        <div className={classes.chains}>\n          <Typography variant=\"headline\">Dependency chains</Typography>\n          <Typography variant=\"subheading\" gutterBottom>\n            Select one of the dependency chains between these two nodes. Try breaking the links\n            between them to see the impact of your changes.\n          </Typography>\n          <Async\n            promise={chainsPromise}\n            then={chains => this.renderChains(chains)}\n            catch={error => <ErrorBox>{error}</ErrorBox>}\n            pending={<LinearProgress className={classes.listProgress} />}\n          />\n        </div>\n        <div className={classes.selectedChain}>\n          {fromNode && (\n            <NodeCard\n              baseGraph={baseGraph}\n              graph={graph}\n              node={fromNode}\n              actions={\n                <>\n                  {fromNode !== toNode && (\n                    <Tooltip\n                      title=\"Set as the last node\"\n                      disableFocusListener\n                      enterDelay={500}\n                      placement=\"top\"\n                    >\n                      <IconButton onClick={() => onToNodeSelect(fromNode.id)}>\n                        <Icon>vertical_align_bottom</Icon>\n                      </IconButton>\n                    </Tooltip>\n                  )}\n                  <IconButton onClick={() => onPinnedToggle(fromNode.id)}>\n                    <Icon>{pinned.indexOf(fromNode.id) >= 0 ? 'star' : 'star_border'}</Icon>\n                  </IconButton>\n                </>\n              }\n            />\n          )}\n          <div className={classes.selectedChainScroll}>{this.renderSelectedChain()}</div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(ChainsExplorer)\n","// @flow\n\nimport * as React from 'react'\nimport {withStyles, Icon} from '@material-ui/core'\nimport orange from '@material-ui/core/colors/amber'\n\ntype Props = {|\n  children: React.Node,\n  classes: Object,\n|}\n\nconst styles = theme => ({\n  root: {\n    background: orange.A700,\n    padding: '8px 24px 8px 24px',\n    display: 'flex',\n    alignItems: 'center',\n    flexShrink: 0,\n    justifyContent: 'center',\n  },\n  icon: {\n    'margin-right': 8,\n  },\n})\n\nconst WarningBar = ({classes, children}: Props) => (\n  <div className={classes.root}>\n    <Icon className={classes.icon}>warning</Icon>\n    <span className={classes.label}>{children}</span>\n  </div>\n)\n\nexport default withStyles(styles)(WarningBar)\n","// @flow\n\nimport * as React from 'react'\nimport {withStyles, Icon} from '@material-ui/core'\n\ntype Props = {|\n  children: React.Node,\n  classes: Object,\n|}\n\nconst styles = theme => ({\n  root: {\n    background: theme.palette.error.dark,\n    color: theme.palette.error.contrastText,\n    padding: '8px 24px 8px 24px',\n    display: 'flex',\n    alignItems: 'center',\n    flexShrink: 0,\n    justifyContent: 'center',\n  },\n  icon: {\n    'margin-right': 8,\n  },\n})\n\nconst ErrorBar = ({classes, children}: Props) => (\n  <div className={classes.root}>\n    <Icon className={classes.icon}>error</Icon>\n    <span className={classes.label}>{children}</span>\n  </div>\n)\n\nexport default withStyles(styles)(ErrorBar)\n","// @flow\n\nimport type {Graph, NodeID} from '../../analysis/graph'\nimport type {Change} from '../../analysis/changes'\n\nimport * as React from 'react'\nimport {without} from 'lodash'\nimport {CopyToClipboard} from 'react-copy-to-clipboard'\nimport {\n  withStyles,\n  IconButton,\n  Icon,\n  List,\n  Toolbar,\n  Button,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n} from '@material-ui/core'\nimport {resolveEdgeForNodes, getNode} from '../../analysis/graph'\nimport EmptyBox from '../EmptyBox'\nimport {encodeUrlStateHash, decodeUrlStateHash} from '../../history'\n\ntype Props = {|\n  graph: Graph,\n  changes: $ReadOnlyArray<Change>,\n  pinned: $ReadOnlyArray<NodeID>,\n  onChangesUpdate: ($ReadOnlyArray<Change>) => void,\n  classes: Object,\n|}\n\nconst styles = theme => ({\n  root: {},\n  list: {\n    maxHeight: '70vh',\n    overflowY: 'auto',\n  },\n  delete: {},\n})\n\nclass ChangesView extends React.PureComponent<Props> {\n  render() {\n    const {classes, graph, changes, pinned, onChangesUpdate} = this.props\n    const textsToCopy = []\n    // Generate new url with pins and most current changes\n    const {origin, pathname, hash} = window.location\n    const currentUrlState = decodeUrlStateHash(hash.slice(1))\n    const shareUrl = `${origin}${pathname}#${encodeUrlStateHash({\n      ...currentUrlState,\n      changes,\n      pinned,\n    })}`\n    textsToCopy.push(shareUrl)\n    return (\n      <div>\n        <List className={classes.list}>\n          {changes.map((change, index) => {\n            const edge = resolveEdgeForNodes(graph, change.from, change.to)\n            if (!edge) return null\n            const fromNode = getNode(graph, edge.from)\n            const toNode = getNode(graph, edge.to)\n            const fromName = fromNode.file || fromNode.name || fromNode.id\n            const toName = edge.name || toNode.name || toNode.id\n            textsToCopy.push(\n              edge.enabled\n                ? `Add \"${toName}\" to \"${fromName}\"`\n                : `Remove \"${toName}\" from \"${fromName}\"`,\n            )\n            return (\n              <ListItem key={index} graph={graph} change={change}>\n                <IconButton\n                  aria-label=\"Delete\"\n                  className={classes.delete}\n                  onClick={() => onChangesUpdate(without(changes, change))}\n                >\n                  <Icon>delete</Icon>\n                </IconButton>\n                <ListItemText\n                  primary={\n                    edge.enabled ? (\n                      <>\n                        Add \"<b>{toName}</b>\" to \"<b>{fromName}</b>\"\n                      </>\n                    ) : (\n                      <>\n                        Remove \"<b>{toName}</b>\" from \"<b>{fromName}</b>\"\n                      </>\n                    )\n                  }\n                />\n                <ListItemSecondaryAction />\n              </ListItem>\n            )\n          })}\n          {changes.length === 0 && (\n            <EmptyBox icon={<Icon>block</Icon>}>\n              No changes applied. Try breaking links between dependencies\n            </EmptyBox>\n          )}\n        </List>\n        <Toolbar>\n          <Button onClick={() => onChangesUpdate([])}>Reset changes</Button>\n          {textsToCopy.length > 0 ? (\n            <CopyToClipboard text={textsToCopy.join('\\n\\n')}>\n              <Button>Copy changes to clipboard</Button>\n            </CopyToClipboard>\n          ) : null}\n          <CopyToClipboard text={shareUrl}>\n            <Button>Copy URL to clipboard</Button>\n          </CopyToClipboard>\n        </Toolbar>\n      </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(ChangesView)\n","// @flow\nimport type {Graph, Node, NodeID} from '../../analysis/graph'\n\nimport * as React from 'react'\nimport classNames from 'classnames'\nimport {withStyles, ListItem, ListItemText} from '@material-ui/core'\nimport NodeSize from './NodeSize'\nimport NodeName from './NodeName'\n\ntype Props = {|\n  baseGraph: Graph,\n  graph: Graph,\n  checked?: boolean,\n  node: Node,\n  hidePackage?: boolean,\n  retainerRootNode?: ?Node,\n  children?: React.Node,\n  selectFromNode?: (node: NodeID) => void,\n  selectToNode?: (node: NodeID) => void,\n  onClick?: () => void,\n  style?: Object,\n  classes: Object,\n  className?: string,\n|}\n\nconst styles = theme => ({\n  root: {\n    // paddingLeft: 16,\n  },\n})\n\nfunction NodeItem({\n  baseGraph,\n  graph,\n  checked,\n  onClick,\n  node,\n  retainerRootNode,\n  selectFromNode,\n  selectToNode,\n  selectNode,\n  hidePackage,\n  style,\n  children,\n  classes,\n  className,\n}: Props) {\n  // {selectFromNode && <a onClick={() => selectFromNode(node.id)}>From</a>}\n  // {selectToNode && <a onClick={() => selectToNode(node.id)}>To</a>}\n\n  return (\n    <div style={style}>\n      <ListItem\n        dense\n        disableGutters\n        ContainerComponent=\"div\"\n        button={!!onClick}\n        onClick={onClick}\n        className={classNames(className, classes.root)}\n      >\n        <ListItemText\n          primary={<NodeName node={node} hidePackage={hidePackage} tooltip />}\n          primaryTypographyProps={{noWrap: true, color: checked ? 'secondary' : 'default'}}\n          secondary={\n            <NodeSize\n              baseGraph={baseGraph}\n              graph={graph}\n              node={node}\n              retainerRootNode={retainerRootNode}\n            />\n          }\n        />\n        {children}\n      </ListItem>\n    </div>\n  )\n}\nexport default withStyles(styles)(NodeItem)\n","// @flow\n\ntype TreeState = {\n  expanded: $ReadOnlyArray<any>,\n}\n\ntype TreeOptions = {\n  getChildren?: any => $ReadOnlyArray<any>,\n  getKey?: any => any,\n}\n\nconst defaultGetChildren = row => row.children\nconst defaultGetKey = row => row\n\nexport function isTreeExpanded(state: TreeState, row: any, options?: TreeOptions = {}): boolean {\n  const {getKey = defaultGetKey} = options\n  return state.expanded.indexOf(getKey(row)) >= 0\n}\n\n// Flattens a tree of items into a flat set of rows, which can be then used in any list rendering lib\nexport function flattenTreeToRows(\n  tree: any,\n  state: TreeState,\n  options?: TreeOptions = {},\n): $ReadOnlyArray<any> {\n  const result = []\n  const {getChildren = defaultGetChildren} = options\n  for (const row of tree) {\n    result.push(row)\n    if (isTreeExpanded(state, row, options)) {\n      const children = getChildren(row)\n      result.push(...flattenTreeToRows(children, state, options))\n    }\n  }\n  return result\n}\n\nexport function toggleTreeRow(\n  state: TreeState,\n  row: any,\n  options?: TreeOptions = {},\n  expand?: boolean,\n): TreeState {\n  const current = isTreeExpanded(state, row, options)\n  if (expand == null) {\n    expand = !current\n  }\n  if (expand === current) return state\n  const {getKey = defaultGetKey} = options\n  const key = getKey(row)\n  if (expand) {\n    return {...state, expanded: [...state.expanded, key]}\n  } else {\n    return {...state, expanded: state.expanded.filter(e => e !== key)}\n  }\n}\n\nexport const toggleTreeRowState = (row: any, options?: TreeOptions = {}) => (state: TreeState) =>\n  toggleTreeRow(state, row, options)\n","// @flow\n\nimport numeral from 'numeral'\n\nimport * as React from 'react'\nimport Fuse from 'fuse.js'\nimport {groupBy, orderBy, map, sortBy, sumBy} from 'lodash'\n\nimport {List, AutoSizer} from 'react-virtualized'\nimport {\n  withStyles,\n  Input,\n  InputAdornment,\n  IconButton,\n  Icon,\n  ListItem,\n  ListItemText,\n  LinearProgress,\n} from '@material-ui/core'\nimport classNames from 'classnames'\nimport {createSelector} from 'reselect'\n\nimport type {Node, Graph, NodeID} from '../../analysis/graph'\nimport {flattenTreeToRows, toggleTreeRowState, isTreeExpanded} from '../tree'\nimport {getPackageName} from '../../analysis/info'\n\nexport type Props = {|\n  baseGraph: Graph,\n  graph: Graph,\n  nodes: $ReadOnlyArray<Node>,\n  renderItem: any => React.Node,\n  renderEmpty: any => React.Node,\n  search?: string,\n  selected?: ?Node,\n  pinned: $ReadOnlyArray<NodeID>,\n  groupNodesBy?: '' | 'package',\n  orderNodesBy?: [any[], string[]],\n  orderGroupsBy?: [any[], string[]],\n  loading?: boolean,\n  classes: Object,\n  className?: string,\n|}\n\ntype State = {\n  search: string,\n  expanded: $ReadOnlyArray<any>,\n}\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'stretch',\n  },\n  search: {},\n  listContainer: {\n    flexGrow: 1,\n    position: 'relative',\n  },\n  list: {\n    outline: 0,\n  },\n})\n\nconst treeOptions = {getKey: group => group.name}\n\nclass NodeList extends React.PureComponent<Props, State> {\n  state = {\n    search: '',\n    expanded: [],\n  }\n  fuseSelector = createSelector(\n    (_, p) => p.nodes,\n    nodes => {\n      return new Fuse(nodes, {\n        keys: ['name', 'id', 'kind'],\n      })\n    },\n  )\n  searchSelector = createSelector(\n    this.fuseSelector,\n    s => s.search,\n    (_, p) => p.orderNodesBy,\n    (fuse, search, orderNodesBy) => {\n      const nodes = search ? fuse.search(search) : fuse.list\n      if (orderNodesBy) {\n        return orderBy(nodes, ...orderNodesBy)\n      }\n      return nodes\n    },\n  )\n  pinnedSelector = createSelector(\n    this.searchSelector,\n    (_, p) => p.pinned,\n    (nodes, pinned) => {\n      return nodes.filter(node => pinned.indexOf(node.id) >= 0)\n    },\n  )\n  groupSelector = createSelector(\n    this.searchSelector,\n    this.pinnedSelector,\n    (_, p) => p.groupNodesBy,\n    (_, p) => p.orderGroupsBy,\n    (nodes, pinned, groupNodesBy, orderGroupsBy) => {\n      let rows\n      if (groupNodesBy === 'package') {\n        const groups = groupBy(nodes, node => {\n          if (node.kind === 'module') {\n            return getPackageName(node) || '(root modules)'\n          }\n          return `(${node.kind}s)`\n        })\n        rows = map(groups, (children, name) => ({\n          name,\n          children: sortBy(children, 'file'),\n          size: sumBy(children, 'size'),\n          group: true,\n        }))\n        rows = orderBy(rows, ...orderGroupsBy)\n      } else {\n        rows = nodes.slice()\n      }\n      rows.unshift(...pinned)\n      return rows\n    },\n  )\n  nodesSelector = createSelector(\n    this.groupSelector,\n    s => s.expanded,\n    (tree, expanded) => {\n      return flattenTreeToRows(tree, {expanded}, treeOptions)\n    },\n  )\n\n  renderList() {\n    const {classes, baseGraph, graph, groupNodesBy, renderItem, renderEmpty} = this.props\n    // $FlowFixMe\n    const nodes = this.nodesSelector(this.state, this.props)\n\n    return (\n      <div className={classes.listContainer}>\n        <AutoSizer>\n          {({width, height}) => (\n            <List\n              className={classes.list}\n              width={width}\n              height={height}\n              rowCount={nodes.length}\n              rowHeight={54}\n              rowRenderer={({index, style}) => {\n                const node = nodes[index]\n                if (node.group) {\n                  return (\n                    <ListItem\n                      dense\n                      ContainerComponent=\"div\"\n                      button\n                      onClick={() => this.setState(toggleTreeRowState(node, treeOptions))}\n                      disableGutters\n                      style={style}\n                      key={index}\n                      divider\n                    >\n                      <ListItemText\n                        primary={node.name}\n                        secondary={`${numeral(node.size).format('0.0b')} in ${\n                          node.children.length\n                        }`}\n                      />\n                      <Icon>\n                        {isTreeExpanded(this.state, node, treeOptions)\n                          ? 'expand_less'\n                          : 'expand_more'}\n                      </Icon>\n                    </ListItem>\n                  )\n                }\n                return renderItem({\n                  node,\n                  key: node.id,\n                  baseGraph,\n                  graph,\n                  hidePackage: Boolean(groupNodesBy),\n                  style,\n                })\n              }}\n              noRowsRenderer={renderEmpty}\n            />\n          )}\n        </AutoSizer>\n      </div>\n    )\n  }\n\n  render() {\n    const {classes, className, loading} = this.props\n    const {search} = this.state\n    return (\n      <div className={classNames(className, classes.root)}>\n        <Input\n          className={classes.search}\n          id=\"adornment-password\"\n          type=\"text\"\n          value={search}\n          onChange={el => this.setState({search: el.target.value})}\n          endAdornment={\n            search && (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  color=\"inherit\"\n                  aria-label=\"Clear search\"\n                  onClick={() => this.setState({search: ''})}\n                >\n                  <Icon color=\"inherit\">clear</Icon>\n                </IconButton>\n              </InputAdornment>\n            )\n          }\n          placeholder=\"Search\"\n        />\n        {loading ? <LinearProgress className={classes.listProgress} /> : this.renderList()}\n      </div>\n    )\n  }\n}\n//scrollToIndex={scrollToIndex >= 0 ? scrollToIndex : null}\nexport default withStyles(styles)(NodeList)\n","// @flow\n\nimport type {Graph, Node, NodeID} from '../../analysis/graph'\nimport type {Props as NodeListProps} from './NodeList'\n\nimport * as React from 'react'\nimport classNames from 'classnames'\nimport {map} from 'lodash'\nimport {createSelector} from 'reselect'\nimport Async from 'react-promise'\nimport {\n  withStyles,\n  Icon,\n  Typography,\n  Menu,\n  MenuItem,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n} from '@material-ui/core'\n\nimport EmptyBox from '../EmptyBox'\nimport NodeItem from './NodeItem'\nimport NodeList from './NodeList'\n\ntype Mode = {\n  getNodes: () => $ReadOnlyArray<Node> | Promise<$ReadOnlyArray<Node>>,\n  renderTitle: () => React.Node,\n  renderInfo: () => React.Node,\n  renderEmpty: () => string,\n  listProps?: () => $Shape<NodeListProps>,\n}\n\nexport type Props = {|\n  baseGraph: Graph,\n  graph: Graph,\n  pinned: $ReadOnlyArray<NodeID>,\n  selected: ?Node,\n  retainerRootNode?: ?Node,\n  modes: {\n    [string]: Mode,\n  },\n  defaultMode: string,\n  onNodeSelect: NodeID => void,\n  classes: Object,\n  className?: string,\n|}\n\ntype State = {|\n  modeId: ?string,\n  modeMenuAnchor: any,\n|}\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    position: 'relative',\n    flexDirection: 'column',\n    justifyContent: 'stretch',\n  },\n  list: {\n    flexGrow: 1,\n  },\n  listProgress: {\n    marginTop: 16,\n  },\n  modeMenuItem: {\n    width: 300,\n  },\n})\n\nclass GraphExplorer extends React.Component<Props, State> {\n  state = {modeId: null, modeMenuAnchor: null}\n\n  modeSelector = (s, p) => p.modes[s.modeId || ''] || p.modes[p.defaultMode]\n  nodesSelector = (s, p) => this.modeSelector(s, p).getNodes()\n\n  nodesPromiseSelector = createSelector(\n    this.nodesSelector,\n    // Needed so we don't recreate the promise on every render\n    nodes => Promise.resolve(nodes),\n  )\n\n  static getDerivedStateFromProps({modes = {}}, state = {}) {\n    if (!modes[state.modeId]) {\n      // If selected mode is not available anymore, switch to default\n      return {modeId: null}\n    }\n    return null\n  }\n\n  handleModeMenuOpen = event => {\n    this.setState({modeMenuAnchor: event.currentTarget})\n  }\n  handleModeMenuClose = () => {\n    this.setState({modeMenuAnchor: null})\n  }\n\n  renderList(nodes) {\n    const {classes, baseGraph, graph, retainerRootNode, selected, pinned, onNodeSelect} = this.props\n    const mode = this.modeSelector(this.state, this.props)\n    const listProps = mode.listProps ? mode.listProps() : {}\n    return (\n      <NodeList\n        className={classes.list}\n        nodes={nodes || []}\n        loading={nodes == null}\n        baseGraph={baseGraph}\n        graph={graph}\n        pinned={pinned}\n        selected={selected}\n        groupNodesBy=\"package\"\n        orderNodesBy={undefined}\n        orderGroupsBy={[['size'], ['desc']]}\n        renderItem={itemProps => (\n          <NodeItem\n            {...itemProps}\n            retainerRootNode={retainerRootNode}\n            onClick={() => onNodeSelect(itemProps.node.id)}\n            checked={selected ? selected.id === itemProps.node.id : false}\n          >\n            {pinned.indexOf(itemProps.node.id) >= 0 ? (\n              <ListItemSecondaryAction>\n                <Icon color=\"disabled\" fontSize=\"inherit\">\n                  star\n                </Icon>\n              </ListItemSecondaryAction>\n            ) : null}\n          </NodeItem>\n        )}\n        renderEmpty={() => <EmptyBox icon={<Icon>block</Icon>}>{mode.renderEmpty()}</EmptyBox>}\n        {...listProps}\n      />\n    )\n  }\n\n  renderModeMenu() {\n    const {classes, modes, defaultMode} = this.props\n    const {modeMenuAnchor, modeId} = this.state\n    const currentModeId = modeId || defaultMode\n    return (\n      <Menu\n        id=\"lock-menu\"\n        anchorEl={modeMenuAnchor}\n        open={Boolean(modeMenuAnchor)}\n        onClose={this.handleModeMenuClose}\n      >\n        {map(modes, (mode: Mode, id) => (\n          <MenuItem\n            className={classes.modeMenuItem}\n            key={id}\n            selected={id === currentModeId}\n            onClick={() => this.setState({modeId: id, modeMenuAnchor: null})}\n          >\n            {mode.renderTitle()}\n          </MenuItem>\n        ))}\n      </Menu>\n    )\n  }\n\n  render() {\n    const {className, classes} = this.props\n\n    const mode = this.modeSelector(this.state, this.props)\n    const nodesPromise = this.nodesPromiseSelector(this.state, this.props)\n\n    return (\n      <div className={classNames(className, classes.root)}>\n        <ListItem\n          button\n          disableGutters\n          className={classes.header}\n          onClick={this.handleModeMenuOpen}\n        >\n          <ListItemText>\n            <Typography variant=\"headline\">{mode.renderTitle()}</Typography>\n            <Typography variant=\"subheading\" gutterBottom>\n              {mode.renderInfo()}\n            </Typography>\n          </ListItemText>\n          <Icon color=\"action\" className={classes.headerMore}>\n            more_vert\n          </Icon>\n        </ListItem>\n        {this.renderModeMenu()}\n        <Async\n          promise={nodesPromise}\n          then={nodes => this.renderList(nodes)}\n          pending={() => this.renderList(null)}\n        />\n      </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(GraphExplorer)\n","// @flow\n\nimport type {Node, NodeID, Graph} from '../../analysis/graph'\n\nimport * as React from 'react'\nimport classNames from 'classnames'\nimport {createSelector} from 'reselect'\nimport {withStyles} from '@material-ui/core'\n\nimport {getNodes, getAllNodes} from '../../analysis/graph'\nimport GraphExplorer from './GraphExplorer'\nimport NodeName from './NodeName'\nimport {\n  getDeepNodeParents,\n  keepOnlyEntryModules,\n  keepOnlyLeafModules,\n} from '../../analysis/dependencies'\nimport {calculateTreeSize} from '../../analysis/size'\n\ntype Props = {|\n  baseGraph: Graph,\n  graph: Graph,\n  fromNode: ?Node,\n  pinned: $ReadOnlyArray<NodeID>,\n  toNode: ?Node,\n  onNodeSelect: NodeID => void,\n\n  className?: string,\n  classes: Object,\n|}\n\nconst styles = {\n  root: {},\n}\n\nconst prepareEntryNodes = async (graph, nodes) => {\n  nodes = keepOnlyEntryModules(graph, nodes)\n  nodes = await Promise.all(\n    nodes.map(async node => ({\n      ...node,\n      treeSize: await calculateTreeSize(graph, node),\n    })),\n  )\n  return nodes\n}\n\nclass ParentsExplorer extends React.PureComponent<Props> {\n  allNodesSelector = createSelector((_, p) => p.graph, graph => getAllNodes(graph))\n  getAllNodes = () => this.allNodesSelector(this.state, this.props)\n\n  entryNodesSelector = createSelector(\n    (_, p) => p.graph,\n    graph => prepareEntryNodes(graph, getAllNodes(graph)),\n  )\n  getEntryNodes = () => this.entryNodesSelector(this.state, this.props)\n\n  leafNodesSelector = createSelector(\n    (_, p) => p.graph,\n    graph => keepOnlyLeafModules(graph, getAllNodes(graph)),\n  )\n  getLeafNodes = () => this.leafNodesSelector(this.state, this.props)\n\n  directParentNodesSelector = createSelector(\n    (_, p) => p.graph,\n    (_, p) => p.fromNode,\n    (graph, fromNode) => {\n      if (!fromNode) return []\n      return getNodes(graph, fromNode.parents)\n    },\n  )\n  getDirectParentNodes = () => this.directParentNodesSelector(this.state, this.props)\n\n  parentNodesSelector = createSelector(\n    (_, p) => p.graph,\n    (_, p) => p.toNode,\n    (graph, toNode) => {\n      if (!toNode) return []\n      return getDeepNodeParents(graph, toNode).then(ids => getNodes(graph, ids))\n    },\n  )\n  getParentNodes = () => this.parentNodesSelector(this.state, this.props)\n\n  parentEntryNodesSelector = createSelector(\n    (_, p) => p.graph,\n    this.parentNodesSelector,\n    async (graph, nodes) => {\n      return prepareEntryNodes(graph, await nodes)\n    },\n  )\n  getParentEntryNodes = () => this.parentEntryNodesSelector(this.state, this.props)\n\n  modes = {\n    all: {\n      getNodes: this.getAllNodes,\n      renderTitle: () => 'All Nodes',\n      renderInfo: () => 'Select node to start from',\n      renderEmpty: () => 'Nothing found',\n    },\n    directParents: {\n      getNodes: this.getDirectParentNodes,\n      renderTitle: () => 'Direct Parents',\n      renderInfo: () => {\n        const {fromNode} = this.props\n        if (!fromNode) return null\n        return (\n          <>\n            Move up to direct parents of <NodeName node={fromNode} />\n          </>\n        )\n      },\n      renderEmpty: () => 'No parents found',\n    },\n    parents: {\n      getNodes: this.getParentNodes,\n      renderTitle: () => 'All Parents',\n      renderInfo: () => {\n        const {toNode} = this.props\n        if (!toNode) return null\n        return (\n          <>\n            Move up to parents of <NodeName node={toNode} />\n          </>\n        )\n      },\n      renderEmpty: () => 'No parents found',\n    },\n    parentEntries: {\n      getNodes: this.getParentEntryNodes,\n      renderTitle: () => 'Parent Entry Points',\n      renderInfo: () => {\n        const {toNode} = this.props\n        if (!toNode) return null\n        return (\n          <>\n            Move up to parent entries of <NodeName node={toNode} />\n          </>\n        )\n      },\n      renderEmpty: () => 'No entries found',\n      listProps: () => ({\n        groupNodesBy: '',\n        orderNodesBy: [['treeSize'], ['desc']],\n      }),\n    },\n    entries: {\n      getNodes: this.getEntryNodes,\n      renderTitle: () => 'Entry Modules',\n      renderInfo: () => 'Select entry module to start from',\n      renderEmpty: () => 'No modules found',\n      listProps: () => ({\n        groupNodesBy: '',\n        orderNodesBy: [['treeSize'], ['desc']],\n      }),\n    },\n  }\n\n  initialModes = {\n    initialAll: this.modes.all,\n    initialEntries: this.modes.entries,\n    initialLeafs: {\n      getNodes: this.getLeafNodes,\n      renderTitle: () => 'Leaf Modules',\n      renderInfo: () => 'Select modules without children',\n      renderEmpty: () => 'No modules found',\n    },\n  }\n\n  render() {\n    // const {} = this.state\n    const {\n      classes,\n      className,\n      fromNode,\n      toNode,\n      baseGraph,\n      graph,\n      pinned,\n      onNodeSelect,\n    } = this.props\n\n    return (\n      <GraphExplorer\n        className={classNames(classes.root, className)}\n        modes={fromNode && toNode ? this.modes : this.initialModes}\n        defaultMode={fromNode && toNode ? 'parents' : 'initialAll'}\n        baseGraph={baseGraph}\n        graph={graph}\n        pinned={pinned}\n        onNodeSelect={onNodeSelect}\n        selected={fromNode}\n      />\n    )\n  }\n}\n\nexport default withStyles(styles)(ParentsExplorer)\n","// @flow\n\nimport type {Node, NodeID, Graph} from '../../analysis/graph'\n\nimport * as React from 'react'\nimport classNames from 'classnames'\nimport {without} from 'lodash'\nimport {createSelector} from 'reselect'\nimport {withStyles} from '@material-ui/core'\n\nimport {getNodes, getAllNodes} from '../../analysis/graph'\nimport GraphExplorer from './GraphExplorer'\nimport NodeName from './NodeName'\nimport {\n  keepOnlyLeafModules,\n  getDeepNodeChildren,\n  getRetainedNodes,\n} from '../../analysis/dependencies'\nimport {calculateRetainedTreeSize} from '../../analysis/size'\n\ntype Props = {|\n  baseGraph: Graph,\n  graph: Graph,\n  pinned: $ReadOnlyArray<NodeID>,\n  fromNode: ?Node,\n  toNode: ?Node,\n  onNodeSelect: NodeID => void,\n\n  className?: string,\n  classes: Object,\n|}\n\nconst styles = {\n  root: {},\n}\n\nclass ChildrenExplorer extends React.PureComponent<Props> {\n  allNodesSelector = createSelector((_, p) => p.graph, graph => getAllNodes(graph))\n  getAllNodes = () => this.allNodesSelector(this.state, this.props)\n\n  leafNodesSelector = createSelector(\n    (_, p) => p.graph,\n    graph => keepOnlyLeafModules(graph, getAllNodes(graph)),\n  )\n  getLeafNodes = () => this.leafNodesSelector(this.state, this.props)\n\n  directChildrenNodesSelector = createSelector(\n    (_, p) => p.graph,\n    (_, p) => p.fromNode,\n    (_, p) => p.toNode,\n    async (graph, fromNode, toNode) => {\n      if (!fromNode || !toNode) return []\n      let nodes = await getNodes(graph, toNode.children)\n      nodes = await Promise.all(\n        nodes.map(async node => ({\n          ...node,\n          treeSize: await calculateRetainedTreeSize(graph, fromNode, node),\n        })),\n      )\n      return nodes\n    },\n  )\n  getDirectChildrenNodes = () => this.directChildrenNodesSelector(this.state, this.props)\n\n  retainedChildrenNodesSelector = createSelector(\n    (_, p) => p.graph,\n    (_, p) => p.fromNode,\n    (_, p) => p.toNode,\n    (graph, fromNode, toNode) => {\n      if (!fromNode || !toNode) return []\n      if (fromNode === toNode) return this.getChildrenNodes()\n      return getRetainedNodes(graph, fromNode, toNode).then(ids =>\n        getNodes(graph, without(ids, toNode.id)),\n      )\n    },\n  )\n  getRetainedChildrenNodes = () => this.retainedChildrenNodesSelector(this.state, this.props)\n\n  childrenNodesSelector = createSelector(\n    (_, p) => p.graph,\n    (_, p) => p.fromNode,\n    (graph, fromNode) => {\n      if (!fromNode) return []\n      return getDeepNodeChildren(graph, fromNode).then(ids => getNodes(graph, ids))\n    },\n  )\n  getChildrenNodes = () => this.childrenNodesSelector(this.state, this.props)\n\n  childLeafNodesSelector = createSelector(\n    (_, p) => p.graph,\n    this.childrenNodesSelector,\n    async (graph, nodes) => {\n      return keepOnlyLeafModules(graph, await nodes)\n    },\n  )\n  getChildLeafNodes = () => this.childLeafNodesSelector(this.state, this.props)\n\n  modes = {\n    all: {\n      getNodes: this.getAllNodes,\n      renderTitle: () => 'All Nodes',\n      renderInfo: () => 'Select node to start from',\n      renderEmpty: () => 'Nothing found',\n    },\n    children: {\n      getNodes: this.getChildrenNodes,\n      renderTitle: () => 'All Children',\n      renderInfo: () => {\n        const {fromNode} = this.props\n        if (!fromNode) return null\n        return (\n          <>\n            Move down to children of <NodeName node={fromNode} />\n          </>\n        )\n      },\n      renderEmpty: () => 'No children found',\n    },\n    retainedChildren: {\n      getNodes: this.getRetainedChildrenNodes,\n      renderTitle: () => 'Retained Children',\n      renderInfo: () => {\n        const {toNode} = this.props\n        if (!toNode) return null\n        return (\n          <>\n            Move down to children retained by <NodeName node={toNode} />\n          </>\n        )\n      },\n      renderEmpty: () => 'No children found',\n    },\n    directChildren: {\n      getNodes: this.getDirectChildrenNodes,\n      renderTitle: () => 'Direct Children',\n      renderInfo: () => {\n        const {toNode} = this.props\n        if (!toNode) return null\n        return (\n          <>\n            Move down to direct children of <NodeName node={toNode} />\n          </>\n        )\n      },\n      renderEmpty: () => 'No children found',\n      listProps: () => ({\n        groupNodesBy: '',\n        orderNodesBy: [['treeSize'], ['desc']],\n      }),\n    },\n    childLeafs: {\n      getNodes: this.getChildLeafNodes,\n      renderTitle: () => 'Child Leaf Modules',\n      renderInfo: () => {\n        const {fromNode} = this.props\n        if (!fromNode) return null\n        return (\n          <>\n            Move down to child leaf modules of <NodeName node={fromNode} />\n          </>\n        )\n      },\n      renderEmpty: () => 'No modules found',\n    },\n    leafs: {\n      getNodes: this.getLeafNodes,\n      renderTitle: () => 'Leaf Modules',\n      renderInfo: () => 'Select leaf module to finish at',\n      renderEmpty: () => 'No modules found',\n    },\n  }\n\n  render() {\n    const {\n      classes,\n      className,\n      fromNode,\n      toNode,\n      baseGraph,\n      graph,\n      pinned,\n      onNodeSelect,\n    } = this.props\n\n    return (\n      <GraphExplorer\n        className={classNames(classes.root, className)}\n        modes={this.modes}\n        defaultMode={'children'}\n        baseGraph={baseGraph}\n        graph={graph}\n        pinned={pinned}\n        onNodeSelect={onNodeSelect}\n        selected={toNode}\n        retainerRootNode={fromNode}\n      />\n    )\n  }\n}\n\nexport default withStyles(styles)(ChildrenExplorer)\n","// @flow\n\nimport type {NodeID, Node, Graph} from './analysis/graph'\nimport type {Change} from './analysis/changes'\n\nimport * as React from 'react'\nimport classNames from 'classnames'\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport Dropzone from 'react-dropzone'\nimport {\n  AppBar,\n  Typography,\n  Toolbar,\n  CssBaseline,\n  withStyles,\n  Button,\n  Drawer,\n  Icon,\n} from '@material-ui/core'\n\nimport ChainsExplorer from './ui/graph/ChainsExplorer'\nimport WarningBar from './ui/WarningBar'\nimport ErrorBar from './ui/ErrorBar'\nimport ChangesView from './ui/graph/ChangesView'\nimport EmptyBox from './ui/EmptyBox'\nimport ParentsExplorer from './ui/graph/ParentsExplorer'\nimport ChildrenExplorer from './ui/graph/ChildrenExplorer'\n\ntype Props = {|\n  loading: boolean,\n  baseGraph: ?Graph,\n  graph: ?Graph,\n  error: any,\n\n  fromNode: ?Node,\n  toNode: ?Node,\n  changes: $ReadOnlyArray<Change>,\n  showChanges: boolean,\n  pinned: $ReadOnlyArray<NodeID>,\n\n  onAddChange: Change => any,\n  onFromNodeSelect: NodeID => any,\n  onToNodeSelect: NodeID => any,\n  onNodesSelectionReset: () => any,\n  onChangesUpdate: ($ReadOnlyArray<Change>) => any,\n  onFileDrop: (files: File[], rejectedFiles: File[]) => any,\n  onShowChangesToggle: () => any,\n  onPinnedToggle: NodeID => any,\n  classes: Object,\n|}\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    height: '100vh',\n    minWidth: 1200,\n    flexDirection: 'column',\n    justifyContent: 'stretch',\n    fontFamily: ['Roboto', 'Helvetica', 'Arial', 'sans-serif'],\n  },\n  container: {\n    maxWidth: 2000,\n    minWidth: 1200,\n    width: '100vw',\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  },\n  panes: {\n    display: 'flex',\n    flexDirection: 'row',\n    flexGrow: 1,\n    justifyContent: 'space-between',\n    padding: '24px 24px 0 24px',\n  },\n  parentsExplorer: {\n    width: 250,\n    flexShrink: 0,\n    flexGrow: 0.2,\n    marginRight: 48,\n  },\n  pathsExplorer: {\n    flexShrink: 1,\n    flexGrow: 1,\n    marginRight: 48,\n  },\n  childrenExplorer: {\n    width: 250,\n    flexShrink: 0,\n    flexGrow: 0.2,\n  },\n  title: {\n    marginLeft: 'auto',\n    textTransform: 'uppercase',\n  },\n  search: {\n    color: '#fff',\n    borderBottom: '2px solid #fff',\n    width: 300,\n  },\n  dropzone: {},\n  openButton: {},\n  openFileMessage: {\n    textAlign: 'center',\n    width: '30em',\n    alignSelf: 'center',\n    margin: 'auto',\n    cursor: 'pointer',\n  },\n})\n\nclass AppUI extends React.Component<Props> {\n  dropzone: any\n\n  renderGraph() {\n    const {\n      baseGraph,\n      graph,\n      fromNode,\n      toNode,\n      pinned,\n      classes,\n      onFromNodeSelect,\n      onToNodeSelect,\n      onAddChange,\n      onPinnedToggle,\n    } = this.props\n    if (!graph || !baseGraph) return null\n    return (\n      <div className={classNames(classes.container, classes.panes)}>\n        <ParentsExplorer\n          className={classes.parentsExplorer}\n          baseGraph={baseGraph}\n          graph={graph}\n          pinned={pinned}\n          toNode={toNode}\n          fromNode={fromNode}\n          onNodeSelect={onFromNodeSelect}\n        />\n        {fromNode && toNode ? (\n          <ChainsExplorer\n            className={classes.pathsExplorer}\n            baseGraph={baseGraph}\n            graph={graph}\n            pinned={pinned}\n            fromNode={fromNode}\n            toNode={toNode}\n            onFromNodeSelect={onFromNodeSelect}\n            onToNodeSelect={onToNodeSelect}\n            onAddChange={onAddChange}\n            onPinnedToggle={onPinnedToggle}\n          />\n        ) : null}\n        {fromNode ? (\n          <ChildrenExplorer\n            className={classes.childrenExplorer}\n            baseGraph={baseGraph}\n            graph={graph}\n            pinned={pinned}\n            toNode={toNode}\n            fromNode={fromNode}\n            onNodeSelect={onToNodeSelect}\n          />\n        ) : null}\n      </div>\n    )\n  }\n\n  render() {\n    const {\n      loading,\n      error,\n      graph,\n      showChanges,\n      changes,\n      pinned,\n      fromNode,\n      classes,\n      onNodesSelectionReset,\n      onChangesUpdate,\n      onFileDrop,\n      onShowChangesToggle,\n    } = this.props\n    return (\n      <Dropzone\n        multiple={false}\n        activeClassName=\"\"\n        rejectClassName=\"\"\n        accept=\".json\"\n        onDrop={onFileDrop}\n        className={classes.dropzone}\n        disableClick\n        ref={node => {\n          this.dropzone = node\n        }}\n      >\n        <div className={classes.root}>\n          <CssBaseline />\n          <AppBar position=\"static\">\n            <Toolbar variant=\"regular\" className={classes.container}>\n              {!loading && (\n                <Button color=\"inherit\" onClick={() => this.dropzone.open()}>\n                  Open stats\n                </Button>\n              )}\n              {graph && (\n                <Button color=\"inherit\" onClick={onShowChangesToggle}>\n                  See changes\n                  {changes.length ? ` (${changes.length})` : null}\n                </Button>\n              )}\n              {fromNode && (\n                <Button color=\"inherit\" onClick={onNodesSelectionReset}>\n                  Choose root node\n                </Button>\n              )}\n              <Typography variant=\"title\" color=\"inherit\" className={classes.title}>\n                Webpack Chop Shop\n              </Typography>\n            </Toolbar>\n          </AppBar>\n          {loading && <LinearProgress className={classes.progress} />}\n          {graph &&\n            graph.errors.length > 0 && (\n              <WarningBar>\n                There where {graph.errors.length} errors found. Check the console for more\n              </WarningBar>\n            )}\n          {error && <ErrorBar>{String(error)}</ErrorBar>}\n          {this.renderGraph()}\n          {!graph &&\n            !loading && (\n              <div onClick={() => this.dropzone.open()} className={classes.openFileMessage}>\n                <EmptyBox\n                  icon={\n                    <Icon color=\"inherit\" fontSize=\"default\">\n                      open_in_browser\n                    </Icon>\n                  }\n                >\n                  First,{' '}\n                  <a\n                    href=\"https://webpack.js.org/api/cli/#stats-options\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    generate the stats file in webpack\n                  </a>\n                  , then click here or drop it anywhere on the page to start\n                </EmptyBox>\n              </div>\n            )}\n          {graph && (\n            <Drawer anchor=\"top\" open={showChanges} onClose={onShowChangesToggle}>\n              <div className={classes.container}>\n                <ChangesView\n                  graph={graph}\n                  changes={changes}\n                  pinned={pinned}\n                  onChangesUpdate={onChangesUpdate}\n                />\n              </div>\n            </Drawer>\n          )}\n        </div>\n      </Dropzone>\n    )\n  }\n}\n\nexport default withStyles(styles)(AppUI)\n","// @flow\n\nimport {createGraph, addNode, getNodeId, addEdge} from './graph'\n\nimport type {Graph} from './graph'\n\nexport async function readWebpackStats(\n  stats: Object,\n  options?: {\n    includeAsyncImports?: boolean,\n    includeChunks?: boolean,\n  } = {},\n): Promise<Graph> {\n  const graph = createGraph()\n  const {includeAsyncImports = false, includeChunks = false} = options\n\n  const {chunks = [], modules = []} = stats\n\n  // create chunks\n  if (includeChunks) {\n    for (const chunk of chunks) {\n      addNode(graph, {\n        id: getNodeId('chunk', chunk.id),\n        originalId: chunk.id,\n        kind: chunk.reason && chunk.reason.indexOf('split chunk') ? 'split-chunk' : 'chunk',\n        name: chunk.names[0],\n        size: 0,\n        original: chunk,\n      })\n      await graph.idle()\n    }\n  }\n\n  // create modules\n  for (const module of modules) {\n    if (module.id == null) {\n      // module has been removed at optimization phase (concatenated, tree-shaken, etc)\n      continue\n    }\n    const isConcat = module.name.indexOf(' + ') > 0\n    const isNamespace = module.name.indexOf(' namespace object') > 0\n    const kind = isConcat ? 'concat' : isNamespace ? 'namespace' : 'module'\n    addNode(graph, {\n      id: getNodeId('module', module.identifier),\n      originalId: module.id,\n      kind,\n      name: module.name,\n      file: isConcat ? undefined : (module.name || '').replace(/^.*!/),\n      size: module.size,\n      original: module,\n    })\n    await graph.idle()\n  }\n\n  // create edges\n  for (const module of modules) {\n    if (includeChunks) {\n      for (const chunkId of module.chunks) {\n        addEdge(graph, {\n          from: getNodeId('chunk', chunkId),\n          to: getNodeId('module', module.id),\n          kind: 'chunk child',\n          original: module,\n        })\n      }\n    }\n    for (const reason of module.reasons) {\n      const type = reason.type || ''\n      if (reason.moduleId == null) {\n        // reason has been removed at optimization phase (concatenated, tree-shaken, etc)\n        continue\n      }\n      const async = type.indexOf('import()') >= 0 && type.indexOf('eager') < 0\n      if (async && includeAsyncImports === false) {\n        continue\n      }\n      addEdge(graph, {\n        from: getNodeId('module', reason.moduleIdentifier),\n        to: getNodeId('module', module.identifier),\n        kind: type,\n        name: reason.userRequest,\n        async,\n        original: reason,\n      })\n    }\n    await graph.idle()\n  }\n  return graph\n}\n","// @flow\n\nimport type {NodeID, Graph} from './analysis/graph'\nimport type {Change} from './analysis/changes'\n\nimport * as React from 'react'\nimport {hot} from 'react-hot-loader'\nimport {isEqual, pick} from 'lodash'\n\nimport {readWebpackStats} from './analysis/webpack'\nimport {getNode, cloneGraph, abortGraph, resolveNode} from './analysis/graph'\nimport {applyChanges, addChange} from './analysis/changes'\nimport AppUI from './AppUI'\nimport {decodeUrlStateHash, encodeUrlStateHash} from './history'\n\nexport type AppState = {|\n  loading: boolean,\n  baseGraph: ?Graph,\n  graph: ?Graph,\n  error: any,\n\n  fromNodeId: ?NodeID,\n  toNodeId: ?NodeID,\n  changes: $ReadOnlyArray<Change>,\n  showChanges: boolean,\n  pinned: $ReadOnlyArray<NodeID>,\n|}\n\nclass App extends React.Component<{}, AppState> {\n  state = {\n    loading: false,\n    error: null,\n    baseGraph: null,\n    graph: null,\n    fromNodeId: null,\n    toNodeId: null,\n    changes: [],\n    showChanges: false,\n    pinned: [],\n  }\n\n  async componentDidMount() {\n    this.initLocalStorage()\n    this.initHistory()\n    if (process.env.REACT_APP_STATS) {\n      this.openFile(async () => {\n        console.time('loading')\n        const result = await fetch(`./${process.env.REACT_APP_STATS || ''}`)\n        console.timeEnd('loading')\n        console.time('parsing')\n        const json = await result.json()\n        console.timeEnd('parsing')\n        return json\n      })\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const hasNewBaseGraph = prevState.baseGraph !== this.state.baseGraph\n    const hasNewChanges = !isEqual(prevState.changes, this.state.changes)\n    if (hasNewBaseGraph || hasNewChanges) {\n      this.applyChanges()\n    }\n  }\n\n  initLocalStorage() {\n    try {\n      const pinned = JSON.parse(window.localStorage.getItem('pinned') || '[]')\n      const changes = JSON.parse(window.localStorage.getItem('changes') || '[]')\n      this.setState({pinned, changes})\n      window.addEventListener('storage', this.handleStorageEvent)\n    } catch (error) {\n      console.error('Local storage failed to initialize', error)\n    }\n  }\n\n  handleStorageEvent = (event: StorageEvent) => {\n    if (event.key === 'pinned' && event.newValue) {\n      const pinned = JSON.parse(event.newValue)\n      if (pinned !== this.state.pinned) {\n        this.setState({pinned})\n      }\n    }\n  }\n\n  initHistory() {\n    try {\n      window.addEventListener('popstate', this.handleHistoryChange)\n      this.handleHistoryChange()\n    } catch (error) {\n      console.error('History failed to initialize', error)\n    }\n  }\n\n  handleHistoryChange = () => {\n    const hash = (window.location.hash || '#').slice(1)\n    if (!hash) return\n    const hashState = decodeUrlStateHash(hash)\n    this.setState(pick(hashState, ['fromNodeId', 'toNodeId', 'changes', 'pinned']))\n  }\n\n  pushHistory = () => {\n    const {fromNodeId, toNodeId} = this.state\n    const encodedState = encodeUrlStateHash({fromNodeId, toNodeId})\n    window.history.pushState(null, null, `/#${encodedState}`)\n  }\n\n  openFile = async callback => {\n    this.setState({\n      loading: true,\n      error: null,\n      baseGraph: null,\n      graph: null,\n    })\n    try {\n      const json = await callback()\n      if (json === null) {\n        this.setState({loading: false})\n        return\n      }\n      console.time('conversion')\n      const graph = await readWebpackStats(json)\n      console.timeEnd('conversion')\n      console.log('Graph: ', graph)\n      console.warn('Errors found: ', graph.errors)\n      this.setState({loading: false, graph, baseGraph: graph})\n    } catch (error) {\n      console.error(error)\n      this.setState({loading: false, error})\n    }\n  }\n\n  handleDrop = ([file], [rejected]) => {\n    if (rejected) {\n      this.setState({error: 'Only webpack build stats in json format are accepted!'})\n      return\n    }\n    this.openFile(\n      () =>\n        new Promise((resolve, reject) => {\n          console.time('loading')\n          const reader = new FileReader()\n          reader.onload = () => {\n            console.timeEnd('loading')\n            console.time('parsing')\n            const json = JSON.parse((reader.result: any))\n            console.timeEnd('parsing')\n            resolve(json)\n          }\n          reader.onerror = () => {\n            console.timeEnd('loading')\n\n            reject('Could not read the file')\n          }\n          reader.readAsBinaryString(file)\n        }),\n    )\n  }\n\n  toggleShowChanges = () => {\n    this.setState({showChanges: !this.state.showChanges})\n  }\n\n  applyChanges = () => {\n    const {baseGraph, graph, changes} = this.state\n    if (!graph || !baseGraph) return\n    const newGraph = cloneGraph(baseGraph)\n    // discard old graph\n    if (graph !== baseGraph) {\n      abortGraph(graph)\n    }\n    applyChanges(newGraph, changes)\n    this.setState({graph: newGraph})\n  }\n\n  updateChanges = changes => {\n    this.setState({changes})\n    window.localStorage.setItem('changes', JSON.stringify(changes))\n  }\n\n  addChange = (change: Change) => {\n    const {graph, changes} = this.state\n    if (!graph) throw new Error('No graph available now')\n    this.updateChanges(addChange(graph, changes, change))\n  }\n\n  setNodesSelection = (fromNodeId: ?NodeID, toNodeId: ?NodeID) => {\n    this.setState({fromNodeId, toNodeId}, this.pushHistory)\n  }\n\n  resetNodesSelection = () => {\n    this.setNodesSelection(null, null)\n  }\n\n  selectFromNode = (fromNodeId: NodeID) => {\n    const {graph, toNodeId} = this.state\n    if (graph) console.log('Selected FROM node', getNode(graph, fromNodeId))\n    this.setNodesSelection(fromNodeId, toNodeId || fromNodeId)\n  }\n\n  selectToNode = (toNodeId: NodeID) => {\n    const {graph, fromNodeId} = this.state\n    if (graph) console.log('Selected TO node', getNode(graph, toNodeId))\n    this.setNodesSelection(fromNodeId || toNodeId, toNodeId)\n  }\n\n  togglePinned = (id: NodeID) => {\n    let {pinned} = this.state\n    const wasPinned = pinned.indexOf(id) >= 0\n    pinned = pinned.filter(pin => pin !== id)\n    if (!wasPinned) {\n      pinned = [id, ...pinned]\n    }\n    this.setState({pinned})\n    window.localStorage.setItem('pinned', JSON.stringify(pinned))\n  }\n\n  render() {\n    const {\n      graph,\n      baseGraph,\n      loading,\n      error,\n      fromNodeId,\n      toNodeId,\n      changes,\n      showChanges,\n      pinned,\n    } = this.state\n    return (\n      <AppUI\n        baseGraph={baseGraph}\n        graph={graph}\n        loading={loading}\n        error={error}\n        fromNode={graph && resolveNode(graph, fromNodeId)}\n        toNode={graph && resolveNode(graph, toNodeId)}\n        changes={changes}\n        showChanges={showChanges}\n        pinned={pinned}\n        onAddChange={this.addChange}\n        onFromNodeSelect={this.selectFromNode}\n        onToNodeSelect={this.selectToNode}\n        onNodesSelectionReset={this.resetNodesSelection}\n        onChangesUpdate={this.updateChanges}\n        onFileDrop={this.handleDrop}\n        onShowChangesToggle={this.toggleShowChanges}\n        onPinnedToggle={this.togglePinned}\n      />\n    )\n  }\n}\n\nexport default hot(module)(App)\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport registerServiceWorker from './registerServiceWorker'\n\nconst rootEl = document.getElementById('root')\n\nregisterServiceWorker()\nReactDOM.render(<App />, rootEl)\n","// @flow\n\nexport const encodeUrlStateHash = (state: Object) => btoa(JSON.stringify(state))\nexport const decodeUrlStateHash = (hash: string) => {\n  try {\n    const state = JSON.parse(atob(hash))\n    if (!state || typeof state !== 'object') throw new Error(`Url is not an object`)\n    return state\n  } catch (error) {\n    console.error('Decoding url failed', error)\n    return {}\n  }\n}\n","// @flow\nimport {throttle} from 'lodash'\n\nexport const ABORTED = Symbol('Aborted')\n\n//\nexport const backgroundProcessor = () => {\n  let abort\n  let idleReject\n  const fn = throttle(\n    () =>\n      new Promise((resolve, reject) => {\n        if (abort) reject(abort())\n        idleReject = reject\n        setTimeout(resolve, 0)\n        // requestIdleCallback(resolve)\n      }),\n    16,\n  )\n  fn.abort = (err = ABORTED) => {\n    return new Promise(resolve => {\n      abort = () => {\n        resolve()\n        return err\n      }\n      if (idleReject) idleReject(abort())\n    })\n  }\n  return fn\n}\n","// @flow\n\nimport {mapValues} from 'lodash'\nimport {backgroundProcessor} from './utils'\n\nexport type NodeID = string\nexport type EdgeID = string\nexport type NodeKind = string\nexport type EdgeKind = string\n\nexport type EdgeSpec = {|\n  name?: string,\n  from: NodeID,\n  to: NodeID,\n  kind: EdgeKind,\n  async?: boolean,\n  enabled?: boolean,\n  // Original source object\n  original?: any,\n|}\n\nexport type Edge = {\n  ...EdgeSpec,\n  enabled: boolean,\n}\n\nexport type NodeSpec = {|\n  id: NodeID,\n  originalId: string,\n  name?: string,\n  kind: NodeKind,\n  size: number,\n  file?: string,\n  // Original source object\n  original?: any,\n|}\n\nexport type Node = {\n  ...NodeSpec,\n  parents: Array<NodeID>,\n  children: Array<NodeID>,\n  //\n  treeSize?: number,\n}\n\nexport type Graph = {|\n  nodes: {[NodeID]: Node},\n  edges: {[EdgeID]: Edge},\n  errors: Array<any>,\n  cache: Object,\n  idle: $Call<typeof backgroundProcessor>,\n|}\n\nexport function createGraph(): Graph {\n  return {\n    nodes: {},\n    edges: {},\n    errors: [],\n    cache: {},\n    idle: backgroundProcessor(),\n  }\n}\n\nexport function getNodeId(kind: string, id: string): NodeID {\n  return `${kind}:${id}`\n}\nexport function getEdgeId(from: NodeID, to: NodeID): EdgeID {\n  return `${from}->${to}`\n}\n\nexport function getNode(graph: Graph, id: NodeID): Node {\n  const node = graph.nodes[id]\n  if (!node) throw new Error(`Node ${id} not found`)\n  return node\n}\n\nexport function resolveNode(graph: Graph, id: ?NodeID): ?Node {\n  if (!id) return null\n  return graph.nodes[id] || null\n}\n\nexport function getEdge(graph: Graph, id: EdgeID): Edge {\n  const edge = graph.edges[id]\n  if (!edge) throw new Error(`Edge ${id} not found`)\n  return edge\n}\n\nexport function resolveEdge(graph: Graph, id: ?EdgeID): ?Edge {\n  if (!id) return null\n  return graph.edges[id] || null\n}\n\nexport function resolveEdgeForNodes(graph: Graph, from: ?NodeID, to: ?NodeID): ?Edge {\n  if (!from || !to) return null\n  return graph.edges[getEdgeId(from, to)]\n}\n\nexport function getNodes(graph: Graph, ids: $ReadOnlyArray<NodeID>): $ReadOnlyArray<Node> {\n  return ids.map(getNode.bind(null, graph))\n}\n\nexport function getAllNodes(graph: Graph): $ReadOnlyArray<Node> {\n  return (Object.values(graph.nodes): any)\n}\n\nexport function getEdges(graph: Graph, ids: $ReadOnlyArray<EdgeID>): $ReadOnlyArray<Edge> {\n  return ids.map(getEdge.bind(null, graph))\n}\n\nexport function getChildren(graph: Graph, node: Node): $ReadOnlyArray<Edge> {\n  return getEdges(graph, node.children.map(to => getEdgeId(node.id, to)))\n}\n\nexport function getParents(graph: Graph, node: Node): $ReadOnlyArray<Edge> {\n  return getEdges(graph, node.parents.map(from => getEdgeId(from, node.id)))\n}\n\nexport function addNode(graph: Graph, _node: NodeSpec): Node {\n  const node = {parents: [], children: [], ..._node}\n  if (graph.nodes[node.id]) throw new Error(`Node ${node.id} already in graph`)\n  graph.nodes[node.id] = node\n  return node\n}\n\nexport function addEdge(graph: Graph, _edge: EdgeSpec): Edge {\n  const edge = {enabled: true, ..._edge}\n  const id = getEdgeId(edge.from, edge.to)\n  if (graph.edges[id]) {\n    // graph.errors.push({\n    // message: 'Edge already in graph',\n    // edge,\n    // graphEdge: graph.edges[id],\n    // })\n    return graph.edges[id]\n  }\n  graph.edges[id] = edge\n  const from = getNode(graph, edge.from)\n  const to = getNode(graph, edge.to)\n  if (edge.enabled) {\n    from.children.push(edge.to)\n    to.parents.push(edge.from)\n  }\n  return edge\n}\n\nexport function toggleEdge(graph: Graph, edge: Edge, enabled: boolean) {\n  if (edge.enabled === enabled) return\n  const from = getNode(graph, edge.from)\n  const to = getNode(graph, edge.to)\n  if (enabled) {\n    from.children.push(edge.to)\n    to.parents.push(edge.from)\n  } else {\n    from.children = from.children.filter(id => id !== edge.to)\n    to.parents = to.parents.filter(id => id !== edge.from)\n  }\n  edge.enabled = enabled\n}\n\nexport function abortGraph(graph: Graph) {\n  return graph.idle.abort()\n}\n\nexport function cloneGraph(graph: Graph): Graph {\n  const newGraph = {\n    nodes: mapValues(graph.nodes, node => ({\n      ...node,\n      parents: [...node.parents],\n      children: [...node.children],\n    })),\n    edges: mapValues(graph.edges, edge => ({...edge})),\n    errors: [...graph.errors],\n    cache: {},\n    idle: backgroundProcessor(),\n  }\n  return newGraph\n}\n"],"sourceRoot":""}